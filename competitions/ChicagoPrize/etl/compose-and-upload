#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017, 2019, 2020 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Compose all of the Lever for Change Chicago Prize Proposal CSV files.

Usage:

  $ compose-and-upload \\
       --proposals-csv=PROPOSALS_CSV \\
       --attachments-dir=ATTACHMENTS_DIR \\
       --tdc-config-dir=TDC_CONFIG_DIR \\
       --pare=PARE \\
       --collection-only

Command-line options:
  --proposals-csv FILE            FILE is a CSV file representing the bulk
                                  of the proposal information

  --expert-pane-csv FILE          FILE is a CSV file representing the expert panel reviews

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.

  --pare ARG                      If ARG is a number, reduce the number of items to 1/ARG.  If
                                  ARG begins with +, then ARG is a comma separated list of
                                  keys to include.  If ARG begins with @, then ARG is a
                                  file with a list of keys to include.  For both + and @,
                                  the list of keys will be limited to only the ones provided.

  --collection-only               Only upload the created CSV file.  Don't upload attachments or
                                  create wiki pages.  For use to speed up process when wiki has been
                                  created already.
"""

from etl import competition, wiki, toc, tdc
import config
import getopt
import sys
import os
import csv


def main():
    """Compose the LFC input and emit it as html-ized csv."""
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "proposals-csv=",
                "tdc-config-dir=",
                "admin-review-csv=",
                "expert-panel-csv=",
                "pare=",
                "collection-only",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    proposals_csv = None
    expert_panel_csv = None
    admin_review_csv = None
    tdc_config_dir = None
    pare = None
    collection_only = False
    for o, a in opts:
        if o == "--proposals-csv":
            proposals_csv = a
        elif o == "--pare":
            pare = a
        elif o == "--collection-only":
            collection_only = True
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        elif o == "--admin-review-csv":
            admin_review_csv = a
        elif o == "--expert-panel-csv":
            expert_panel_csv = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if proposals_csv is None:
        sys.stderr.write("ERROR: need --proposals-csv option.\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    comp = competition.CsvBasedCompetition(
        proposals_csv, "ChicagoPrize", "Application #", pare
    )

    fix_cell_processor = competition.FixCellProcessor()
    comp.process_all_cells_special(fix_cell_processor)
    fix_cell_processor.report()

    admin_review = competition.AdminReview(admin_review_csv, "Application #", "Review Action")
    comp.add_supplemental_information(admin_review)
    comp.filter_proposals(admin_review)

    comp.process_cells_special(
        "Organization legal name", competition.RemoveHTMLBRsProcessor()
    )
    comp.process_cells_special("Project title", competition.RemoveHTMLBRsProcessor())

    comp.add_supplemental_information(competition.MediaWikiTitleAdder("Project title"))
    comp.add_supplemental_information(
        competition.GlobalViewMediaWikiTitleAdder("ChicagoPrize", "Project title")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Competition Name", "ChicagoPrize")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Achievement Level", "")
    )

    comp.process_cells_special("Total Projected Costs", competition.NumberCommaizer())

    comp.add_supplemental_information(
        competition.EvaluationAdder(
            "Panel",
            expert_panel_csv,
            app_col_name="Application #",
            score_rank_raw_col_name="OverallScoreRank",
            score_rank_normalized_col_name="OverallScoreRankNormalized",
            sum_of_scores_raw_col_name="SumOfScores",
            sum_of_scores_normalized_col_name="SumOfScoresNormalized",
            trait_col_name="Trait",
            score_raw_col_name="TraitScore",
            score_normalized_col_name="TraitScoreNormalized",
            comments_col_name="TraitJudgeComment",
            comments_score_raw_col_name="TraitScore",
            comments_score_normalized_col_name="TraitScoreNormalized",
            anonymous_judge_name_col_name="AnonymousJudgeName",
            primary_rank=True,
        )
    )

    comp.transform_sheet(
        competition.LocationCombiner(
            column_name="Organization Location",
            address_1="Street address",
            city="City",
            state="State",
            zip_postal="Zip/ Postal Code",
        )
    )

    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Participant",
            first_name="First name",
            last_name="Last name",
            email="Email address",
            phone="Phone",
        )
    )

    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Primary Contact",
            first_name="Primary first name",
            last_name="Primary last name",
            title="Primary job title",
            phone="Primary phone",
            email="Primary email",
        )
    )
    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Secondary Contact",
            first_name="Secondary first name",
            last_name="Secondary last name",
            title="Secondary job title",
            phone="Secondary phone",
            email="Secondary email",
        )
    )

    for num in ["1", "2", "3"]:
        comp.transform_sheet(
            competition.PersonCombiner(
                column_name="Key Staff #%s" % num,
                first_name="Manager #%s First name" % num,
                last_name="Manager #%s Last name" % num,
            )
        )

        comp.transform_sheet(
            competition.ColumnRenamer(
                "Manager #%s Biography" % num, "Key Staff #%s Biography" % num
            )
        )

    comp.transform_sheet(competition.ColumnRenamer("ind_key", "GUID"))
    comp.transform_sheet(competition.ColumnRenamer("Organization legal name", "Organization Name"))
    comp.transform_sheet(competition.ColumnRenamer("Employer Identification Number", "Applicant Tax Identification Number"))
    comp.transform_sheet(competition.ColumnRenamer("Website", "Organization Website"))
    comp.transform_sheet(competition.ColumnRenamer("Legal Status", "Organization Legal Status"))
    comp.transform_sheet(competition.ColumnRenamer("Project title", "Project Title"))
    comp.transform_sheet(competition.ColumnRenamer("Key Words", "Key Words and Phrases"))
    comp.transform_sheet(competition.ColumnRenamer("Video Pitch", "Video"))
    comp.transform_sheet(competition.ColumnRenamer("Hear About", "Source"))
    comp.transform_sheet(competition.ColumnRenamer("Your Team", "Why Your Team"))
    comp.transform_sheet(competition.ColumnRenamer("One-sentence description", "Project Description"))
    comp.transform_sheet(competition.ColumnRenamer("Community Collaborations", "Community Engagement"))
    comp.transform_sheet(competition.ColumnRenamer("Timeline", "Timeline and Milestones"))
    comp.transform_sheet(competition.ColumnRenamer("Your Impact", "Project Focus"))
    comp.transform_sheet(competition.ColumnRenamer("Feasibility and Risk Mitigation", "Barrier Assessment and Risk Mitigation"))
    comp.transform_sheet(competition.ColumnRenamer("Divertsity;Equity & Inclusion", "Diversity-Equity-Inclusion"))
    comp.transform_sheet(competition.ColumnRenamer("Budget narrative", "Budget Narrative"))
    comp.transform_sheet(competition.ColumnRenamer("Budget", "Budget Notes"))
    comp.transform_sheet(competition.ColumnRenamer("Neighborhoods", "Local Context"))
    comp.transform_sheet(competition.ColumnRenamer("Your Approach", "Theory of Change"))
    comp.transform_sheet(competition.ColumnRenamer("Organization Budget", "Total Projected Costs"))
    comp.transform_sheet(competition.ColumnRenamer("Panel COMMUNITY-LED COLLABORATION Score", "Panel COMMUNITY-INFORMED Score"))
    comp.transform_sheet(competition.ColumnRenamer("Panel COMMUNITY-LED COLLABORATION Judge Data", "Panel COMMUNITY-INFORMED Judge Data"))
    comp.transform_sheet(competition.ColumnRenamer("Panel LEVERAGE Score", "Panel ACTIONABLE Score"))
    comp.transform_sheet(competition.ColumnRenamer("Panel LEVERAGE Judge Data", "Panel ACTIONABLE Judge Data"))

    comp.add_allowlist_exception("The Story Of Your Place", "Application")
    comp.add_allowlist_exception("Your Vision", "Application")
    comp.add_allowlist_exception("Your Project(s)", "Application")
    comp.add_allowlist_exception("Financial Leverage", "Application")
    comp.add_allowlist_exception("Planning Grant", "Application")

    comp.remove_information(competition.ColumnRemover("Ind_key + Competition Domain"))

    comp.sort("Rank", True)

    list_toc = toc.ListToc("All_Proposals")
    comp.add_toc(list_toc)

    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.Columns(comp).generate(tdc_config_dir)
        tdc.ProcessedCollection(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )
    my_wiki.collection_only = collection_only
    my_wiki.upload_collection(comp)


if __name__ == "__main__":
    main()
