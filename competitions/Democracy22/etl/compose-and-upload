#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017, 2019, 2020 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Compose all of the Lever for Change Strong Democracy Award Proposal CSV files.

Usage:

  $ compose-and-upload \\
       --proposals-csv=PROPOSALS_CSV \\
       --admin-review-csv=ADMIN_REVIEW_CSV \\
       --attachments-dir=ATTACHMENTS_DIR \\
       --tdc-config-dir=TDC_CONFIG_DIR \\
       --correction-file=CORRECTION_FILE \\
       --pare=PARE \\
       --collection-only

Command-line options:
  --proposals-csv FILE            FILE is a CSV file representing the bulk
                                  of the proposal information

  --attachments-dir DIR           DIR is a directory for compose-csvs to look in for what attachments
                                  will be uploaded to the torque wiki.  It needs to have subdirectories
                                  by proposal number.

  --admin-review-csv FILE         FILE is a CSV file representing which applications
                                  in PROPOSALS_CSV should be included, as well as the Organization
                                  information

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.

  --correction-file FILE          FILE is a csv of corrections to the main data.  The header
                                  must match the header of the original proposals file, and any
                                  one of the columns must contain the review number.  Then
                                  the data from the correction file will override the
                                  source data for output.  There can be multiple correction
                                  files, and each one overwrites the previous.

                                  If the data cells have the empty string, no correction is applied.

  --pare ARG                      If ARG is a number, reduce the number of items to 1/ARG.  If
                                  ARG begins with +, then ARG is a comma separated list of
                                  keys to include.  If ARG begins with @, then ARG is a
                                  file with a list of keys to include.  For both + and @,
                                  the list of keys will be limited to only the ones provided.

  --collection-only               Only upload the created CSV file.  Don't upload attachments or
                                  create wiki pages.  For use to speed up process when wiki has been
                                  created already.
"""

from etl import competition, wiki, toc, tdc, Geocoder
import config
import getopt
import sys
import os
import csv

class ProposalMapToc(toc.Toc):
    def __init__(self):
        self.name = "Proposal_Map"
        self.maps_dir = "templates"

    def template_file(self):
        from pathlib import Path
        return Path("%s/proposal_map.html" % self.maps_dir).read_text()

    def raw(self):
        return False

class FinalistMapToc(toc.Toc):
    def __init__(self, finalist_proposal_ids):
        self.name = "Finalist_Map"
        self.maps_dir = "templates"
        self.finalist_proposal_ids = finalist_proposal_ids

    def template_file(self):
        from pathlib import Path
        return Path("%s/finalist_map.html" % self.maps_dir).read_text()

    def raw(self):
        return False

    def grouped_data(self):
        return {"finalist_proposal_ids": self.finalist_proposal_ids}

class ChoroplethMapToc(toc.Toc):
    def __init__(self):
        self.name = "Choropleth_Map"
        self.maps_dir = "templates"

    def template_file(self):
        from pathlib import Path
        return Path("%s/choropleth_map.html" % self.maps_dir).read_text()

    def raw(self):
        return False

class LFCAnalysisAdder(competition.InformationAdder):
    """Adds the columns for the LFC Analysis, all empty because these
    cells are there to be edited upon later"""

    def column_names(self):
        return ["LFC Analysis"]

    def cell(self, proposal, column_name):
        return {
            "Recommendation": "",
            "Short Description": "",
            "Overview": "",
            "Strength of Approach": "",
            "Risks and Challenges": "",
            "Reputational Risks": "",
            "Diversity, Equity and Inclusion": "",
            "Other Considerations": "",
        }


def main():
    """Compose the LFC input and emit it as html-ized csv."""
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "proposals-csv=",
                "admin-review-csv=",
                "peer-rankings-csv=",
                "panel-rankings-csv=",
                "tdc-config-dir=",
                "finalists=",
                "attachments-dir=",
                "correction-file=",
                "pare=",
                "collection-only",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    proposals_csv = None
    admin_review_csv = None
    peer_rankings_csv = None
    panel_rankings_csv = None
    attachments_dir = None
    tdc_config_dir = None
    finalists = False
    correction_file = None
    pare = None
    collection_only = False
    for o, a in opts:
        if o == "--proposals-csv":
            proposals_csv = a
        elif o == "--pare":
            pare = a
        elif o == "--collection-only":
            collection_only = True
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        elif o == "--admin-review-csv":
            admin_review_csv = a
        elif o == "--peer-rankings-csv":
            peer_rankings_csv = a
        elif o == "--panel-rankings-csv":
            panel_rankings_csv = a
        elif o == "--correction-file":
            correction_file = a
        elif o == "--finalists":
            finalists = a
        elif o == "--attachments-dir":
            attachments_dir = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if proposals_csv is None:
        sys.stderr.write("ERROR: need --proposals-csv option.\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    comp = competition.CsvBasedCompetition(
        proposals_csv, "Democracy22", "Application #", pare
    )

    comp.filter_proposals(
        competition.ColumnEqualsProposalFilter("Admin Review Status", "Not Applicable")
    )

    comp.add_supplemental_information(
        competition.LinkedSecondSheet(
            admin_review_csv, "Application #", [{"source_name": "Organization name"}]
        )
    )

    correction_processor = competition.CorrectionData("Application #", correction_file)
    for column in correction_processor.columns_affected():
        comp.process_cells_special(column, correction_processor)

    fix_cell_processor = competition.FixCellProcessor()
    comp.process_all_cells_special(fix_cell_processor)
    fix_cell_processor.report()

    comp.process_cells_special(
        "Organization name", competition.RemoveHTMLBRsProcessor()
    )
    comp.process_cells_special("Project Title", competition.RemoveHTMLBRsProcessor())

    comp.add_supplemental_information(competition.MediaWikiTitleAdder("Project Title"))
    comp.add_supplemental_information(
        competition.GlobalViewMediaWikiTitleAdder("Democracy22", "Project Title")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Competition Name", "Democracy22")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Achievement Level", "")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder(
            "Sustainable Development Goals",
            [{"number": 16, "title": "Peace, Justice and Strong Institutions" }]
        )
    )

    comp.add_supplemental_information(
        competition.EvaluationAdder(
            "Peer",
            peer_rankings_csv,
            app_col_name="Application #",
            score_rank_raw_col_name="Overall Score Rank",
            score_rank_normalized_col_name="Overall Score Rank Normalized ",
            sum_of_scores_raw_col_name="Sum Of Scores ",
            sum_of_scores_normalized_col_name="Sum Of Scores Normalized ",
            trait_col_name="Trait",
            score_raw_col_name="Trait Score",
            score_normalized_col_name="Trait Score Normalized",
            comments_col_name="Trait Judge Comment ",
            comments_score_raw_col_name="Trait Score",
            comments_score_normalized_col_name="Trait Score Normalized",
            anonymous_judge_name_col_name="Anonymous Judge Name",
            primary_rank=False,
        )
    )
    comp.add_supplemental_information(
        competition.EvaluationAdder(
            "Panel",
            panel_rankings_csv,
            app_col_name="Application #",
            score_rank_raw_col_name="Overall Score Rank",
            score_rank_normalized_col_name="Overall Score Rank Normalized ",
            sum_of_scores_raw_col_name="Sum Of Scores ",
            sum_of_scores_normalized_col_name="Sum Of Scores Normalized ",
            trait_col_name="Trait",
            score_raw_col_name="Trait Score",
            score_normalized_col_name="Trait Score Normalized",
            comments_col_name="Trait Judge Comment ",
            comments_score_raw_col_name="Trait Score",
            comments_score_normalized_col_name="Trait Score Normalized",
            anonymous_judge_name_col_name="Anonymous Judge Name",
            primary_rank=True,
        )
    )

    comp.process_cells_special("Priority Populations", competition.ToListProcessor())
    comp.process_cells_special("Total Projected Costs", competition.StringToNumber())
    comp.process_cells_special("Budget Data", competition.BudgetTableProcessor())
    comp.process_cells_special(
        "Annual Operating Budget",
        competition.AnnualBudgetProcessor(
            {
                competition.AnnualBudget.LESS_THAN_1_MIL: "Less than $1 Million",
                competition.AnnualBudget.BETWEEN_1_MIL_AND_5_MIL: "$1.0 to 5.0 Million",
                competition.AnnualBudget.BETWEEN_5_MIL_AND_10_MIL: "$5.1 to 10 Million",
                competition.AnnualBudget.BETWEEN_10_MIL_AND_25_MIL: "$10.1 to 25 Million",
                competition.AnnualBudget.BETWEEN_25_MIL_AND_50_MIL: "$25.1 to 50 Million",
                competition.AnnualBudget.BETWEEN_50_MIL_AND_100_MIL: "$50.1 to 100 Million",
                competition.AnnualBudget.BETWEEN_100_MIL_AND_500_MIL: "$100.1 to 500 Million",
                competition.AnnualBudget.BETWEEN_500_MIL_AND_1_BIL: "$500.1 Million to $1 Billion",
                competition.AnnualBudget.MORE_THAN_1_BIL: "$1 Billion +",
            }
        ),
    )
    comp.process_cells_special(
        "Primary Subject Area",
        competition.PrimarySubjectAreaProcessor()
    )


    comp.transform_sheet(
        competition.LocationCombiner(
            column_name="Organization Location",
            address_1="Street Address",
            address_2="Street Address Line 2",
            city="City",
            state="Org State / Province",
            locality="Org Locality / District / County",
            country="Org Nation",
            zip_postal="Zip / Postal Code",
        )
    )

    if (config.geocode_api_key):
        geocoder = Geocoder.Geocoder(config.geocode_api_key)
        comp.process_cells_special("Organization Location", competition.GeocodeProcessor(geocoder))

    comp.add_toc(ProposalMapToc())
    comp.add_toc(ChoroplethMapToc())

    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Participant",
            first_name="Participant First Name",
            last_name="Participant Last Name",
            email="Participant Email",
        )
    )
    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Primary Contact",
            first_name="Primary Contact First Name",
            last_name="Primary Contact Last Name",
            title="Primary Contact Title",
            phone="Primary Contact Phone",
            email="Primary Contact Email",
        )
    )
    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Secondary Contact",
            first_name="Secondary Contact First Name",
            last_name="Secondary Contact Last Name",
            title="Secondary Contact Title",
            phone="Secondary Contact Phone",
            email="Secondary Contact Email",
        )
    )

    for num in ["1", "2", "3"]:
        comp.transform_sheet(
            competition.PersonCombiner(
                column_name="Key Staff #%s" % num,
                first_name="Key Staff #%s: First Name" % num,
                last_name="Key Staff #%s: Last Name" % num,
            )
        )
        comp.transform_sheet(
            competition.ColumnRenamer(
                "Key Staff #%s: Affiliation" % num, "Key Staff #%s Affiliation" % num
            )
        )
        comp.transform_sheet(
            competition.ColumnRenamer(
                "Key Staff #%s: Biography" % num, "Key Staff #%s Biography" % num
            )
        )

    for num in ["1", "2", "3", "5"]:
        comp.transform_sheet(
            competition.LocationCombiner(
                column_name="Current Work #%s Location" % num,
                state="Location of Current Work #%s State / Province" % num,
                locality="Location of Current Work #%s Locality / District / County"
                % num,
                country="Location of Current Work #%s Country" % num,
            )
        )
        comp.remove_information(
            competition.ColumnRemover("Location of Current Work #%s Country ID" % num)
        )
        comp.remove_information(
            competition.ColumnRemover(
                "Location of Current Work #%s Locality / District / County ID" % num
            )
        )
        comp.remove_information(
            competition.ColumnRemover(
                "Location of Current Work #%s State / Province ID" % num
            )
        )

    comp.transform_sheet(
        competition.LocationCombiner(
            column_name="Current Work #4 Location",
            state="Location of Current Solution #4 State",
            locality="Location of Current Solution #4 Locality",
            country="Location of Current Solution #4 Country",
        )
    )
    comp.remove_information(
        competition.ColumnRemover("Location of Current Solution #4 Country ID")
    )
    comp.remove_information(
        competition.ColumnRemover("Location of Current Solution #4 Locality ID")
    )
    comp.remove_information(
        competition.ColumnRemover("Location of Current Solution #4 State ID")
    )

    for num in ["1", "2", "3", "4", "5"]:
        comp.transform_sheet(
            competition.LocationCombiner(
                column_name="Future Work #%s Location" % num,
                state="Location of Future Work #%s State / Province" % num,
                locality="Location of Future Work #%s Locality / District / County"
                % num,
                country="Location of Future Work #%s Country" % num,
            )
        )
        comp.remove_information(
            competition.ColumnRemover("Location of Future Work #%s Country ID" % num)
        )
        comp.remove_information(
            competition.ColumnRemover(
                "Location of Future Work #%s Locality / District / County ID" % num
            )
        )
        comp.remove_information(
            competition.ColumnRemover(
                "Location of Future Work #%s State / Province ID" % num
            )
        )

    comp.transform_sheet(competition.ColumnRenamer("Application GUID", "GUID"))
    comp.transform_sheet(
        competition.ColumnRenamer("Competition domain", "Competition Domain")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Solution Category", "Primary Subject Area Category")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("EIN", "Applicant Tax Identification Number")
    )
    comp.transform_sheet(competition.ColumnRenamer("VIDEO PRESENTATION", "Video"))
    comp.transform_sheet(
        competition.ColumnRenamer("Organization name", "Organization Name")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Exclusive Summary", "Executive Summary")
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Lead Applicant Website or Social Media Page", "Organization Website"
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Project Website or Social Media Page", "Project Website"
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Ability to Scale", "Ability To Scale")
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Stakeholder &amp; Community Engagement", "Community Engagement"
        )
    )

    comp.add_allowlist_exception("Lead Applicant Name", "Application")
    comp.add_allowlist_exception("Team Partners", "Application")

    comp.remove_information(
        competition.ColumnRemover("Application GUID + competition domain")
    )
    comp.remove_information(competition.ColumnRemover("Org Nation ID"))
    comp.remove_information(competition.ColumnRemover("Org State / Province ID"))
    comp.remove_information(
        competition.ColumnRemover("Org Locality / District / County ID")
    )
    comp.remove_information(competition.ColumnRemover("Priority Populations IDs"))
    comp.remove_information(competition.ColumnRemover("Primary Subject Area ID"))
    comp.remove_information(competition.ColumnRemover("Primary Area of Expertise ID"))

    attachments = competition.BasicAttachments(
        comp.sorted_proposal_keys, attachments_dir
    )
    comp.add_supplemental_information(attachments)
    comp.add_supplemental_information(LFCAnalysisAdder())
    comp.sort("Rank", True)

    comp.add_allowlist_exception("Peer Rank", "Confidential")
    list_toc = toc.ListToc("All_Proposals")
    list_toc.proposal_formatter = toc.WikiTableTocProposalFormatter(
        [
            {
                "name": "Organization Name",
                "heading": "Organization",
            },
            {
                "name": "Project Title",
                "heading": "Title",
                "link": True,
            },
            {
                "name": "Rank",
                "heading": "Expert Panel Rank",
                "right_aligned": True,
            },
            {
                "name": ["Peer Rank", "Normalized"],
                "heading": "Peer to Peer Rank",
                "right_aligned": True,
            },
        ]
    )
    comp.add_toc(list_toc)

    with open(finalists) as f:
        finalist_data = f.read().splitlines()
        semifinalist_toc = toc.ListToc("Semi_Finalists")
        semifinalist_toc.proposals = [comp.proposals[k] for k in finalist_data if k in comp.proposals]

        def location_column(group_var_name, id_var_name):
            return "{{ %s[%s]['Organization Location']['City'] }}, {{ %s[%s]['Organization Location']['State/Province'] }}" % (
                group_var_name,
                id_var_name,
                group_var_name,
                id_var_name,
            )

        semifinalist_toc.proposal_formatter = toc.WikiTableTocProposalFormatter(
            [
                {
                    "name": "Organization Name",
                    "heading": "Organization",
                },
                {
                    "name": "Project Title",
                    "heading": "Title",
                    "link": True,
                },
                {
                    "name": "Primary Subject Area Category",
                    "heading": "Category",
                },
                {
                    "processor": location_column,
                    "heading": "Location",
                },
                {
                    "name": "Rank",
                    "heading": "Expert Panel Rank",
                    "right_aligned": True,
                },
                {
                    "name": ["Peer Rank", "Normalized"],
                    "heading": "Peer to Peer Rank",
                    "right_aligned": True,
                },
            ]
        )
        comp.add_toc(semifinalist_toc)
        comp.add_toc(FinalistMapToc(finalist_proposal_ids=finalist_data))

    comp.add_toc(toc.GenericListToc("Populations", "Priority Populations"))
    comp.add_toc(toc.GenericToc("Solution_Categories", "Primary Subject Area Category"))
    comp.add_toc(toc.AnnualBudgetToc("Annual Operating Budget"))

    comp.add_toc(
        toc.GenericToc(
            "Number_of_Employees",
            "Number of Employees",
            [
                "Fewer than 10 Full-time Employees",
                "10 to 25 Full-time Employees",
                "26 to 50 Full-time Employees",
                "51 to 100 Full-time Employees",
                "101 to 300 Full-time Employees",
                "301 to 500 Full-time Employees",
                "501 to 1,000 Full-time Employees",
                "1,000+ Full-time Employees",
            ],
        )
    )

    comp.add_toc(
        toc.GeographicToc(
            "Current_Work_Locations",
            [
                "Current Work #1 Location",
                "Current Work #2 Location",
                "Current Work #3 Location",
                "Current Work #4 Location",
                "Current Work #5 Location",
            ],
            [
                competition.LocationCombiner.COUNTRY,
                competition.LocationCombiner.STATE,
            ],
        )
    )

    comp.add_toc(
        toc.GeographicToc(
            "Future_Work_Locations",
            [
                "Future Work #1 Location",
                "Future Work #2 Location",
                "Future Work #3 Location",
                "Future Work #4 Location",
                "Future Work #5 Location",
            ],
            [
                competition.LocationCombiner.COUNTRY,
                competition.LocationCombiner.STATE,
            ],
        )
    )

    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.ValidProposals(comp, "Admin Review Status", "Valid").generate(
            tdc_config_dir
        )
        tdc.Columns(comp).generate(tdc_config_dir)
        tdc.ProcessedCollection(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )
    my_wiki.collection_only = collection_only
    my_wiki.upload_collection(comp)
    my_wiki.upload_attachments(attachments.attachments)

    for proposal in comp.proposals.values():
        my_wiki.create_page(
            "Evaluations of %s" % proposal.cell("MediaWiki Title"),
            "{{ #tdcrender:Democracy22/id/" + proposal.key() + ".mwiki|Evaluations }}",
            True,
        )

    with open(finalists) as f:
        for key in f.read().splitlines():
            if key in comp.proposals:
                proposal = comp.proposals[key]
                my_wiki.create_page(
                    "LFC Analysis of %s" % proposal.cell("MediaWiki Title"),
                    "{{ #tdcrender:Democracy22/id/" + key + ".mwiki|LFCAnalysis }}",
                )


if __name__ == "__main__":
    main()
