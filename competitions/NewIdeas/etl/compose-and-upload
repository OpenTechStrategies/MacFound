#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017, 2019, 2020 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Compose all of the Lever for Change New Ideas CSV files.

Usage:

  $ compose-and-upload \\
       --ideas-csv=IDEAS_CSV \\
       --attachments-dir=ATTACHMENTS_DIR \\
       --tdc-config-dir=TDC_CONFIG_DIR \\
       --pare=PARE \\
       --collection-only

Command-line options:
  --ideas-csv FILE                FILE is a CSV file representing the bulk
                                  of the idea information

  --attachments-dir DIR           DIR is a directory for compose-and-upload to look in for what attachments
                                  will be uploaded to the torque wiki.  It needs to have subdirectories
                                  by idea number.

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by Torque, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.

  --pare ARG                      If ARG is a number, reduce the number of items to 1/ARG.  If
                                  ARG begins with +, then ARG is a comma separated list of
                                  keys to include.  If ARG begins with @, then ARG is a
                                  file with a list of keys to include.  For both + and @,
                                  the list of keys will be limited to only the ones provided.

  --collection-only               Only upload the created CSV file.  Don't upload attachments or
                                  create wiki pages.  For use to speed up process when wiki has been
                                  created already.
"""

from etl import competition, wiki, toc, tdc
import config
import getopt
import sys
import os
import csv


def main():
    """Compose the LFC input and emit it as html-ized csv."""
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "ideas-csv=",
                "attachments-dir=",
                "tdc-config-dir=",
                "pare=",
                "collection-only",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    ideas_csv = None
    tdc_config_dir = None
    attachments_dir = None
    pare = None
    collection_only = False
    for o, a in opts:
        if o == "--ideas-csv":
            ideas_csv = a
        elif o == "--pare":
            pare = a
        elif o == "--collection-only":
            collection_only = True
        elif o == "--attachments-dir":
            attachments_dir = a
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if ideas_csv is None:
        sys.stderr.write("ERROR: need --ideas-csv option.\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    comp = competition.CsvBasedCompetition(ideas_csv, "NewIdeas", "Number", pare)

    fix_cell_processor = competition.FixCellProcessor()
    comp.process_all_cells_special(fix_cell_processor)
    fix_cell_processor.report()

    comp.process_cells_special("Nominator", competition.RemoveHTMLBRsProcessor())
    comp.process_cells_special("Idea", competition.RemoveHTMLBRsProcessor())

    comp.add_supplemental_information(competition.MediaWikiTitleAdder("Idea"))

    comp.add_supplemental_information(
        competition.StaticColumnAdder("Competition Name", "NewIdeas")
    )
    attachments = competition.BasicAttachments(
        comp.sorted_proposal_keys, attachments_dir
    )
    comp.add_supplemental_information(attachments)

    comp.sort("Nominator")

    list_toc = toc.ListToc("All_Ideas")
    list_toc.proposal_formatter = toc.WikiTableTocProposalFormatter(
        [
            {
                "name": "Nominator",
                "heading": "Nominator",
            },
            {
                "name": "Idea",
                "heading": "Idea",
                "link": True,
            },
        ]
    )
    comp.add_toc(list_toc)
    comp.add_toc(
        toc.GenericToc("Nominators", "Nominator")
    )
    comp.add_toc(
        toc.GenericToc("Subject", "Subject")
    )

    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.Columns(comp).generate(tdc_config_dir)
        tdc.ProcessedCollection(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )
    my_wiki.collection_only = collection_only
    my_wiki.upload_collection(comp, validate=False)
    my_wiki.upload_attachments(attachments.attachments)


if __name__ == "__main__":
    main()
