#!/usr/bin/env python3
__doc__ = """\
Compose all of the Lever for Change Climate 2030 Proposal CSV files.

Usage:

  $ populate-wiki \\
          --tdc-config-dir=TDC_CONFIG_DIR \\
          --competition=NAME --competition-csv=FILE \\
          --competition=NAME2 --competition-csv=FILE2 \\
          ...

Command-line options:
  --competition NAME              NAME is the name of a competition that lines up
                                  one to one with competition-csv below

  --competition-csv FILE          FILE is a CSV file representing the output of
                                  a competition's etl pipeline.

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.
"""

from etl import competition, wiki, toc, tdc
import config
import getopt
import sys
import os
import csv


competition_configs = {
    "LLIIA2020": {
        "sheet_name": "LLIIA2020",
        "wiki_key": "LLIIA2020",
        "score": "Panel Score",
        "required_rank": 16,
    },
    "100Change2020": {
        "sheet_name": "LFC100Change2020",
        "wiki_key": "100Change2020",
        "score": "Panel Score",
        "required_rank": 100,
    },
    "Climate2030": {
        "sheet_name": "Climate2030",
        "wiki_key": "Climate2030",
        "score": "Panel Score",
        "required_rank": 15,
    },
}


def main():
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "competition-json=",
                "competition=",
                "tdc-config-dir=",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    competition_names = []
    competition_jsons = []
    tdc_config_dir = None
    for o, a in opts:
        if o == "--competition":
            if a not in competition_configs:
                sys.stderr.write(
                    "ERROR: competition '%s' is not in our competition_configs\n" % a
                )
                sys.exit(2)
            competition_names.append(a)
        elif o == "--competition-json":
            competition_jsons.append(a)
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if tdc_config_dir is None:
        sys.stderr.write("ERROR: need --tdc-config-dir option.\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    if len(competition_names) == 0 or len(competition_jsons) == 0:
        sys.stderr.write(
            "ERROR: need at least one --competition and --competition-json option.\n\n"
        )
        sys.stderr.write(__doc__)
        sys.exit(1)

    if len(competition_names) != len(competition_jsons):
        sys.stderr.write(
            "ERROR: number of --competition and --competition-json options needs to be the same.\n\n"
        )
        sys.stderr.write(__doc__)
        sys.exit(1)

    columns = [
        "Global Application #",
        "Competition Application #",
        "Competition Name",
        "Wiki Key",
        "Collection Name",
        "Project Title",
        "Project Description",
        "Executive Summary",
        "Organization Name",
        "Organization Location",
        "Priority Populations",
        "Sustainable Development Goals",
        "Admin Review Status",
        "MediaWiki Title",
    ]

    rpa_proposals = {}
    rpa_keys = []
    for name, comp_json in zip(competition_names, competition_jsons):
        comp = competition.JsonBasedCompetition(comp_json, name, "Application #")

        for proposal in comp.ordered_proposals():
            if int(proposal.cell("Rank")) > competition_configs[name]["required_rank"]:
                continue

            rpa_proposal = {c: proposal.cell(c) for c in columns}
            rpa_key = ("%s_%s" % (name, proposal.key()))
            rpa_proposal["Global Application #"] = rpa_key
            rpa_proposal["Competition Application #"] = proposal.key()
            rpa_proposal["Wiki Key"] = competition_configs[name]["wiki_key"]
            rpa_proposal["Competition Name"] = name
            rpa_proposal["Collection Name"] = competition_configs[name]["sheet_name"]
            rpa_proposal["MediaWiki Title"] = proposal.cell(
                competition.GlobalViewMediaWikiTitleAdder.title_column_name
            )

            if not rpa_proposal["Sustainable Development Goals"]:
                rpa_proposal["Sustainable Development Goals"] = []
            if not rpa_proposal["Priority Populations"]:
                rpa_proposal["Priority Populations"] = []

            rpa_proposals[rpa_key] = competition.Proposal(
                rpa_proposal, "Global Application #"
            )
            rpa_keys.append(rpa_key)

    comp = competition.Competition(
        rpa_proposals, columns, rpa_keys, "RPAColumbia", "Global Application #"
    )
    comp.process_cells_special("Project Title", competition.RemoveHTMLBRsProcessor())
    comp.add_allowlist_exception("Global Application #", "Application")
    comp.add_allowlist_exception("Competition Application #", "Application")
    comp.add_allowlist_exception("Rank", "Confidential")
    comp.add_allowlist_exception("Score", "Confidential")
    comp.add_allowlist_exception("Wiki Key", "Application")
    comp.add_allowlist_exception("Collection Name", "Application")

    # Replacing BRs with spaces for this one, because of the data having new lines in
    # the middle of some organization names
    comp.process_cells_special(
        "Organization Name", competition.RemoveHTMLBRsProcessor(" ")
    )

    class AllProposalsList(toc.ListToc):
        def __init__(self, page_name, column_name):
            super().__init__(page_name)

            def title_column(group_var_name, id_var_name):
                template = "[[{{ %s[%s]['%s'] }}|{{ %s[%s]['%s'] }}]]<br>" % (
                    group_var_name,
                    id_var_name,
                    competition.MediaWikiTitleAdder.title_column_name,
                    group_var_name,
                    id_var_name,
                    "Project Title",
                )
                template += "<div style='text-indent:20px'>{{ %s[%s]['%s'] }}</div>" % (
                    group_var_name,
                    id_var_name,
                    column_name,
                )
                return template

            self.proposal_formatter = toc.WikiTableTocProposalFormatter(
                 [
                     {
                         "name": "Organization Name",
                         "heading": "Organization",
                     },
                     {
                         "processor": title_column,
                         "heading": "Title",
                     },
                     {
                         "name": "Competition Name",
                         "heading": "Competition",
                     },
                     {
                         "name": "Competition Application #",
                         "heading": "ID #",
                         "right_aligned": True,
                     },
                 ]
             )

    comp.add_toc(AllProposalsList("All_Proposals", "Project Description"))
    comp.add_toc(AllProposalsList("All_Proposals_Executive_Summary", "Executive Summary"))

    comp.add_toc(
        toc.MultiLevelToc(
            "Organization_Geography_By_Country",
            [
                "Organization Location",
            ],
            [
                competition.LocationCombiner.REGION,
                competition.LocationCombiner.SUBREGION,
                competition.LocationCombiner.COUNTRY,
            ],
        )
    )

    state_toc = toc.MultiLevelToc(
        "Organization_Geography_By_State",
        [
            "Organization Location",
        ],
        [
            competition.LocationCombiner.STATE,
        ],
    )
    state_toc.proposals = [
        p
        for p in comp.ordered_proposals()
        if p.cell("Organization Location")["Country"] == "United States"
    ]
    comp.add_toc(state_toc)

    comp.add_toc(
        toc.GenericListToc(
            "Populations", "Priority Populations", None, toc.GenericToc.SortMethod.COUNT
        )
    )

    comp.add_toc(
        toc.SustainableDevelopmentGoalToc(
            "Sustainable_Development_Goals",
            "Sustainable Development Goals",
        )
    )

    comp.sort("Organization Name")
    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.Columns(comp).generate(tdc_config_dir)
        tdc.ProcessedCollection(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )

    my_wiki.collection_only = True
    my_wiki.upload_collection(comp)

    for proposal in comp.proposals.values():
        print(proposal.cell("MediaWiki Title"))
        my_wiki.create_page(
            proposal.cell("MediaWiki Title"),
            """{{ #tdcrender:%s/id/%s.mwiki|Default|%s|RPAColumbia }}

<!-- TABS: PROPOSAL -->"""
            % (
                proposal.cell("Collection Name"),
                proposal.cell("Competition Application #"),
                proposal.cell("Wiki Key"),
            ),
            True,
        )


if __name__ == "__main__":
    main()
