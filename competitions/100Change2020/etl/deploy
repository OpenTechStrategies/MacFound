#!/bin/bash

# Copyright (C) 2017, 2019, 2020  Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

CSV_ONLY=""
PARE=""
while getopts "cp:" opt; do
  case $opt in
    c) CSV_ONLY="--csv-only" ;;
    p) PARE="--pare=$OPTARG" ;;
  esac
done
shift $((OPTIND -1))

COMPETITION="100Change2020"
LFC_DIR=`dirname "${0}"`
BASE_DATA_DIR="${1}"

if [ "${BASE_DATA_DIR}" = "" ]; then
  echo "ERROR: BASE_DATA_DIRECTORY argument required."
  echo ""
  echo "Usage: '${0} [-c] [-p arg] BASE_DATA_DIRECTORY'"
  echo ""
  echo "Options:"
  echo ""
  echo "  -c                  Uploads CSV only.  Skips creating pages and"
  echo "                      uploading attachments."
  echo "  -p <arg>            If ARG is a number, pares by factor of ARG. If"
  echo "                      ARG begins with +, then ARG is a comma separated"
  echo "                      list of keys to include.  If ARG begins with @,"
  echo "                      then ARG is a file with a newline separated list"
  echo "                      of keys to include."
  echo ""
  echo "BASE_DATA_DIRECTORY/100Change2020 is where all the work is done."
  echo ""
  exit 1
fi

DATA_DIR="${BASE_DATA_DIR}/${COMPETITION}"

# Make sure we have python3
python3 -V > /dev/null 2>&1 || { echo "python3 required, aborting" ; exit 1; }

PROPOSALS_CSV="Export-reg-and-app-data-Submission-deadline-06082019-fixed-by-OTS.csv"
BASE_ATTACHMENTS="Pdfs-and-Submission-Deadline-exports.zip"
ATTACHMENTS_DIR="${DATA_DIR}/attachments"
JUDGE_EVALUATION_CSV="P2P-review-data-20190929-for-OTS-copy-fixed-by-OTS.csv"
ADMIN_REVIEW_CSV="AdminReviewP2P_mac2019_09192019.csv"
WISEHEAD_EVALUATION_CSV="100Change_Wise_Head_Review_data_anon_judges_11162019.csv"
TMP_ATTACHMENTS_DIR="${DATA_DIR}/tmpattachments"
TECH_REVIEW_ATTACHMENTS="Tech_Review_PDFs.zip"
EDITED_TECH_REVIEW_ATTACHMENTS="Reviews_Edited_for_Applicants.zip"
FACTSHEET_ATTACHMENTS="Two-page_Factsheets.zip"
COVID_ATTACHMENTS="Covid-for-OTS-2020-04-25.zip"
FINAL_6_ATTACHMENTS="Wiki_Stage2_OTS.zip"
FINAL_6_ATTACHMENTS_CSV="Wiki_Stage2_OTS.csv"
SDGCONFIG_CSV="sdgconfig.csv"
CANDID_CORRECTION_FILE="Candid_Application_Data_Clean_for_OTS_2020_01_13_01.csv"
OTS_CORRECTION_FILE="OTS_Corrections.csv"
OTS_METADATA="OTS_Metadata.csv"

TDC_CONFIG_DIR="${DATA_DIR}/tdcconfig"
RUNNER="${LFC_DIR}"/compose-and-upload

if [ ! -d "${DATA_DIR}" ] ; then
  echo "Stage 0: Setting up data directory..."

  if [ "${OTS_DIR}" = "" ] ; then
    echo "ERROR: \$OTS_DIR is not set up"
    echo ""
    echo "See bureaucracy/onboarding about setting the OTS_DIR environment variable up"
    exit 1
  fi

  ENCRYPTED_DIR="${OTS_DIR}/clients/lever-for-change/torque-sites/${COMPETITION}/data/bigdata"
  if [ ! -d "${ENCRYPTED_DIR}" ] ; then
    echo "ERROR: it looks like your encrypted dir isn't checked out"
    echo ""
    echo "It was expected to be in:"
    echo "  $ENCRYPTED_DIR"
    echo ""
    echo "You will need to check out the subversion torque-sites data, and then"
    echo "run get-bigdata from ${OTS_DIR}/clients/lever-for-change/torque-sites/${COMPETITION}/data/"
    exit 1
  fi

  mkdir -p $DATA_DIR
  echo "Decrypting..."

  gpg -o ${DATA_DIR}/${PROPOSALS_CSV} --decrypt ${ENCRYPTED_DIR}/${PROPOSALS_CSV}.gpg || exit 1
  gpg -o ${DATA_DIR}/${ADMIN_REVIEW_CSV} --decrypt ${ENCRYPTED_DIR}/${ADMIN_REVIEW_CSV}.gpg || exit 1
  gpg -o ${DATA_DIR}/${JUDGE_EVALUATION_CSV} --decrypt ${ENCRYPTED_DIR}/${JUDGE_EVALUATION_CSV}.gpg || exit 1
  gpg -o ${DATA_DIR}/${WISEHEAD_EVALUATION_CSV} --decrypt ${ENCRYPTED_DIR}/${WISEHEAD_EVALUATION_CSV}.gpg || exit 1
  gpg -o ${DATA_DIR}/${CANDID_CORRECTION_FILE} --decrypt ${ENCRYPTED_DIR}/${CANDID_CORRECTION_FILE}.gpg || exit 1
  gpg -o ${DATA_DIR}/${OTS_CORRECTION_FILE} --decrypt ${ENCRYPTED_DIR}/${OTS_CORRECTION_FILE}.gpg || exit 1
  gpg -o ${DATA_DIR}/${OTS_METADATA} --decrypt ${ENCRYPTED_DIR}/${OTS_METADATA}.gpg || exit 1

  mkdir -p ${TDC_CONFIG_DIR}

  gpg -o ${DATA_DIR}/${BASE_ATTACHMENTS} --decrypt ${ENCRYPTED_DIR}/${BASE_ATTACHMENTS}.gpg || exit 1
  gpg -o ${DATA_DIR}/${TECH_REVIEW_ATTACHMENTS} --decrypt ${ENCRYPTED_DIR}/${TECH_REVIEW_ATTACHMENTS}.gpg || exit 1
  gpg -o ${DATA_DIR}/${EDITED_TECH_REVIEW_ATTACHMENTS} --decrypt ${ENCRYPTED_DIR}/${EDITED_TECH_REVIEW_ATTACHMENTS}.gpg || exit 1
  gpg -o ${DATA_DIR}/${FACTSHEET_ATTACHMENTS} --decrypt ${ENCRYPTED_DIR}/${FACTSHEET_ATTACHMENTS}.gpg || exit 1
  gpg -o ${DATA_DIR}/${COVID_ATTACHMENTS} --decrypt ${ENCRYPTED_DIR}/${COVID_ATTACHMENTS}.gpg || exit 1
  gpg -o ${DATA_DIR}/${FINAL_6_ATTACHMENTS} --decrypt ${ENCRYPTED_DIR}/${FINAL_6_ATTACHMENTS}.gpg || exit 1
  gpg -o ${DATA_DIR}/${FINAL_6_ATTACHMENTS_CSV} --decrypt ${ENCRYPTED_DIR}/${FINAL_6_ATTACHMENTS_CSV}.gpg || exit 1

  mkdir -p ${ATTACHMENTS_DIR}
  echo "Setting up attachments..."
  unzip -d $ATTACHMENTS_DIR ${DATA_DIR}/${BASE_ATTACHMENTS} 

  mkdir -p $TMP_ATTACHMENTS_DIR
  unzip -d $TMP_ATTACHMENTS_DIR ${DATA_DIR}/${TECH_REVIEW_ATTACHMENTS}
  ls $TMP_ATTACHMENTS_DIR | grep "[[:digit:]]\+_" | while read file ; do
    cp -v $TMP_ATTACHMENTS_DIR/$file ${ATTACHMENTS_DIR}/${file/_*/} ;
  done
  rm -rf $TMP_ATTACHMENTS_DIR

  mkdir -p $TMP_ATTACHMENTS_DIR
  unzip -d $TMP_ATTACHMENTS_DIR ${DATA_DIR}/${FACTSHEET_ATTACHMENTS}
  ls $TMP_ATTACHMENTS_DIR | grep "_[[:digit:]]\+.pdf$" | while read file ; do
    NUM=${file/*_/};
    NUM=${NUM/.pdf/};
    cp -v $TMP_ATTACHMENTS_DIR/$file ${ATTACHMENTS_DIR}/$NUM/;
  done
  rm -rf $TMP_ATTACHMENTS_DIR

  mkdir -p $TMP_ATTACHMENTS_DIR
  unzip -d $TMP_ATTACHMENTS_DIR ${DATA_DIR}/${COVID_ATTACHMENTS}
  ls $TMP_ATTACHMENTS_DIR | grep "^[[:digit:]]\+_.*.pdf$" | while read file ; do
    NUM=${file/_*/};
    COVID_FILENAME=COVID_$file
    cp -v $TMP_ATTACHMENTS_DIR/$file ${ATTACHMENTS_DIR}/$NUM/$COVID_FILENAME;
  done
  rm -rf $TMP_ATTACHMENTS_DIR

  mkdir -p $TMP_ATTACHMENTS_DIR
  unzip -d $TMP_ATTACHMENTS_DIR ${DATA_DIR}/${EDITED_TECH_REVIEW_ATTACHMENTS}
  ls $TMP_ATTACHMENTS_DIR | grep "^[[:digit:]]\+_.*.pdf$" | while read file ; do
    NUM=${file/_*/};
    EDITED_TECH_REVIEW_FILENAME="${NUM}_Tech Review Redacted.pdf"
    cp -v "$TMP_ATTACHMENTS_DIR/$file" "${ATTACHMENTS_DIR}/$NUM/$EDITED_TECH_REVIEW_FILENAME"
  done
  rm -rf $TMP_ATTACHMENTS_DIR

  mkdir -p $TMP_ATTACHMENTS_DIR
  unzip -d $TMP_ATTACHMENTS_DIR ${DATA_DIR}/${FINAL_6_ATTACHMENTS}
  while IFS=, read DIRECTORY_NAME APP_NUMBER ; do
    cp -v "$TMP_ATTACHMENTS_DIR/Wiki_Stage2_OTS/$DIRECTORY_NAME/*Prospectus*.pdf" "$ATTACHMENTS_DIR/$APP_NUMBER/"
    cp -v "$TMP_ATTACHMENTS_DIR/Wiki_Stage2_OTS/$DIRECTORY_NAME/*Appendix*.pdf" "$ATTACHMENTS_DIR/$APP_NUMBER/"
  done < ${DATA_DIR}/${FINAL_6_ATTACHMENTS_CSV}
  rm -rf $TMP_ATTACHMENTS_DIR

  # Clean up large zips to save disk space
  rm ${DATA_DIR}/${BASE_ATTACHMENTS}
  rm ${DATA_DIR}/${TECH_REVIEW_ATTACHMENTS}
  rm ${DATA_DIR}/${FACTSHEET_ATTACHMENTS}
  rm ${DATA_DIR}/${COVID_ATTACHMENTS}
  rm ${DATA_DIR}/${FINAL_6_ATTACHMENTS}
fi

if ! echo "bad31bbabd6b03ec5be834d3d87ec70361e8efa0  $DATA_DIR/$PROPOSALS_CSV" | sha1sum -c &> /dev/null ; then
  echo "ERROR: SHA of PROPOSALS_CSV did not match expectation!"
  echo "This means that we most likely got a new file, which may have the old"
  echo "errors in it (specifically the organization proposal 829)."
  echo "If we got a new file and there are no further errors, you"
  echo "can remove this check from torque-refresh!  If not, please"
  echo "make adjustments in a new file and update the sha."
  exit 1
fi

if ! echo "5b1ad76d329a47f0a7b62a76abdbfc4f98a87c59  $DATA_DIR/$JUDGE_EVALUATION_CSV" | sha1sum -c &> /dev/null ; then
  echo "ERROR: SHA of JUDGE_EVALUATION_CSV did not match expectation!"
  echo "This means that we most likely got a new file, which may have the old"
  echo "errors in it (specifically some comments for proposal 5539)."
  echo "If we got a new file and there are no further errors, you"
  echo "can remove this check from torque-refresh!  If not, please"
  echo "make adjustments in a new file and update the sha."
  exit 1
fi

mkdir -p $TDC_CONFIG_DIR

${RUNNER} --proposals-csv="${DATA_DIR}/${PROPOSALS_CSV}" \
          --admin-review-csv="${DATA_DIR}/${ADMIN_REVIEW_CSV}" \
          --judge-evaluation-csv="${DATA_DIR}/${JUDGE_EVALUATION_CSV}" \
          --wisehead-evaluation-csv="${DATA_DIR}/${WISEHEAD_EVALUATION_CSV}" \
          --sdgconfig-csv="${LFC_DIR}/${SDGCONFIG_CSV}" \
          --ots-metadata="${DATA_DIR}/${OTS_METADATA}" \
          --correction-file="${DATA_DIR}/${CANDID_CORRECTION_FILE}" \
          --correction-file="${DATA_DIR}/${OTS_CORRECTION_FILE}" \
          --attachments-dir=${ATTACHMENTS_DIR} \
          $PARE \
          $CSV_ONLY \
          --tdc-config-dir="${TDC_CONFIG_DIR}"
if [ $? -ne 0 ]; then
		echo Failure!
		exit 1
fi

echo "Done creating wiki."
