#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017, 2019, 2020 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Compose all of the Lever for Change 2020 Proposal CSV files.

Usage:

  $ compose-csvs \\
       --proposals-csv=PROPOSALS_CSV \\
       --admin-review-csv=ADMIN_REVIEW_CSV \\
       --judge-evaluation-csv=JUDGE_EVALUATION_CSV \\
       --wisehead-evaluation-csv=WISEHEAD_CSV \\
       --attachments-dir=ATTACHMENTS_DIR \\
       --correction-file=COORECTION_FILE \\
       --tdc-config-dir=TDC_CONFIG_DIR \\
       --pare=PARE \\
       --collection-only

Command-line options:
  --proposals-csv FILE            FILE is a CSV file representing the bulk
                                  of the proposal information

  --admin-review-csv FILE         FILE is a CSV file representing which applications
                                  in PROPOSALS_CSV should be included

  --judge-evaluation-csv FILE     FILE is a CSV file with a many to one relationshp
                                  between judges and the proposals they evaluated,
                                  with the extra data being their evaluation

  --wisehead-evaluation-csv FILE  FILE is a CSV file with a many to one relationship
                                  between wisehead judges and the proposals they
                                  evaluated, like the judge-evaluation-csv

  --wisehead-corrected-scores-csv FILE     FILE is a CSV file with corrected scores

  --correction-file FILE          FILE is a csv of corrections to the main data.  The header
                                  must match the header of the original proposals file, and any
                                  one of the columns must contain the review number.  Then
                                  the data from the correction file will override the
                                  source data for output.  There can be multiple correction
                                  files, and each one overwrites the previous.

                                  If the data cells have the empty string, no correction is applied.

  --ots-metadata FILE             FILE is a csv of MetaData created by OTS to use when creating
                                  the final spreadsheet.  Each row defines a given override attribute
                                  for a given review number, and what value should go there.
                                  This spreadsheet grows as the ETL pipeline one-off needs grow.

  --attachments-dir DIR           DIR is a directory for compose-csvs to look in for what attachments
                                  will be uploaded to the torque wiki.  It needs to have subdirectories
                                  by proposal number.

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.

  --pare ARG                      If ARG is a number, reduce the number of items to 1/ARG.  If
                                  ARG begins with +, then ARG is a comma separated list of
                                  keys to include.  If ARG begins with @, then ARG is a
                                  file with a list of keys to include.  For both + and @,
                                  the list of keys will be limited to only the ones provided.

  --collection-only               Only upload the created CSV file.  Don't upload attachments or
                                  create wiki pages.  For use to speed up process when wiki has been
                                  created already.

"""

from etl import competition, wiki, toc, tdc, utils
import config
import getopt
import sys
import os
import re
import csv


def process_ots_metadata(ots_metadata_file):
    """Process READER into a dictionary that's contextual based
    on what metadata ots needs to process the ETL pipeline.  This
    changes as special cases are brought up.  It returns an object
    where the attribute (column 1), maps to the value (column 2)
    for the given review number (column 0). The top level object is
    keyed on the review number.

    For instance:

    Review Number,Attribute,Value
    1,Wild Card,yes

    maps to

    { "1": { "Wild Card": "yes" } }
    """
    reader = csv.reader(
        open(ots_metadata_file, encoding="utf-8"), delimiter=",", quotechar='"'
    )
    header = next(reader)

    metadata = {}
    for row in reader:
        review_number = row[0]
        attribute_name = row[1]
        value = row[2]

        if review_number not in metadata:
            metadata[review_number] = {}

        metadata[review_number][attribute_name] = value

    return metadata


def create_tdc_config(tdc_config_dir, comp):
    """Helper method to write out base config files to TDC_CONFIG_DIR.

    Needs HEADER_ROW and NEW_ROWS to generate the column and proposal
    data.  Generates the following:

      - AllProposals - All the proposals generated
      - Top100 - The top 100 proposals
      - Top100AndWildCards - the above but with the 113 declared wildcards
      - FinalistCandidates - the top 100, with wild cards, but omitting TR Disqualified
      - Top200 - The top 200 proposals
      - PassedReview - The ~455 proposals that passed wisehead review
      - AllColumns - All the available columns
      - ApiColumns - The columns used in v1 of the API
      - NonReviewColumns - The columns excepting ones relating to reviews
    """

    tdc.AllProposals(comp).generate(tdc_config_dir)
    tdc.ValidProposals(comp, "Valid", "Valid").generate(tdc_config_dir)
    tdc.Columns(comp).generate(tdc_config_dir)
    tdc.ProcessedCollection(comp).generate(tdc_config_dir)

    with open(os.path.join(tdc_config_dir, "Top100"), "w") as f:
        f.writelines(
            [
                tdc.proposal_to_title_line(p)
                for p in comp.ordered_proposals()
                if int(p.cell("Panel Overall Score Rank Normalized")) < 101
            ]
        )

    with open(os.path.join(tdc_config_dir, "Top100AndWildcards"), "w") as f:
        f.writelines(
            [
                tdc.proposal_to_title_line(p)
                for p in comp.ordered_proposals()
                if (
                    int(p.cell("Panel Overall Score Rank Normalized")) < 101
                    or p.cell("Wild Card") == "Wild Card"
                )
            ]
        )

    with open(os.path.join(tdc_config_dir, "FinalistCandidates"), "w") as f:
        f.writelines(
            [
                tdc.proposal_to_title_line(p)
                for p in comp.ordered_proposals()
                if (
                    int(p.cell("Panel Overall Score Rank Normalized")) < 101
                    or p.cell("Wild Card") == "Wild Card"
                    and p.cell("TR Disqualified") != "TR Disqualified"
                )
            ]
        )

    with open(os.path.join(tdc_config_dir, "Top200"), "w") as f:
        # 202 here because there was a duplicate removed before
        f.writelines(
            [
                tdc.proposal_to_title_line(p)
                for p in comp.ordered_proposals()
                if int(p.cell("Panel Overall Score Rank Normalized")) < 202
            ]
        )

    with open(os.path.join(tdc_config_dir, "PassedReview"), "w") as f:
        f.writelines(
            [
                tdc.proposal_to_title_line(p)
                for p in comp.ordered_proposals()
                if int(p.cell("Panel Overall Score Rank Normalized")) != 9999
            ]
        )


class ApplicationLevelAdder(competition.InformationAdder):
    """Adds the Application Level column, which is a special API field"""

    def column_names(self):
        return ["Application Level"]

    def cell(self, proposal, column_name):
        if (
            int(proposal.cell("Panel Overall Score Rank Normalized")) < 101
            or proposal.cell("Wild Card") == "Wild Card"
        ) and proposal.cell("TR Disqualified") != "TR Disqualified":
            return "Highly Ranked"
        else:
            return "NULL"


class WildcardAdder(competition.InformationAdder):
    """Adds whether this proposal is a wildcard"""

    def __init__(self, ots_metadata):
        self.ots_metadata = ots_metadata

    def column_names(self):
        return ["Wild Card"]

    def cell(self, proposal, column_name):
        return self.ots_metadata.get(proposal.key(), {}).get("Wild Card", "")


class WildcardEligibleAdder(competition.InformationAdder):
    """Adds whether this proposal is wildcard eligible"""

    def column_names(self):
        return ["Wild Card Eligible"]

    def cell(self, proposal, column_name):
        rank = int(proposal.cell("Panel Overall Score Rank Normalized"))
        return "Wild Card Eligible" if rank > 100 and rank <= 201 else ""


class TRDisqualifiedAdder(competition.InformationAdder):
    """Adds whether this proposal has been disaqualified upon review"""

    def __init__(self, ots_metadata):
        self.ots_metadata = ots_metadata

    def column_names(self):
        return ["TR Disqualified"]

    def cell(self, proposal, column_name):
        return self.ots_metadata.get(proposal.key(), {}).get("TR Disqualified", "")


class AppendixDisplayNames:
    """Adds a list matching the Prospectus Appendix Attachments for the names"""

    def clean(self, attachments):
        for attachment in attachments:
            name = attachment.name
            name = re.sub(".pdf", "", name)
            name = re.sub("^[^_]*_", "", name)
            name = re.sub("_", " ", name)
            attachment.name = name


def main():
    """Compose the LFC input and emit it as html-ized csv."""
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "proposals-csv=",
                "admin-review-csv=",
                "judge-evaluation-csv=",
                "wisehead-evaluation-csv=",
                "wisehead-corrected-scores-csv=",
                "ots-metadata=",
                "tdc-config-dir=",
                "attachments-dir=",
                "correction-file=",
                "pare=",
                "collection-only",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    proposals_csv = None
    admin_review_csv = None
    judge_evaluation_csv = None
    wisehead_evaluation_csv = None
    wisehead_corrected_scores_csv = None
    regionconfig_csv = None
    attachments_dir = None
    toc_dir = None
    ots_metadata_csv = None
    tdc_config_dir = None
    correction_files = []
    pare = None
    collection_only = False
    for o, a in opts:
        if o == "--proposals-csv":
            proposals_csv = a
        elif o == "--pare":
            pare = a
        elif o == "--collection-only":
            collection_only = True
        elif o == "--admin-review-csv":
            admin_review_csv = a
        elif o == "--judge-evaluation-csv":
            judge_evaluation_csv = a
        elif o == "--wisehead-evaluation-csv":
            wisehead_evaluation_csv = a
        elif o == "--wisehead-corrected-scores-csv":
            wisehead_corrected_scores_csv = a
        elif o == "--ots-metadata":
            ots_metadata_csv = a
        elif o == "--correction-file":
            correction_files.append(a)
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        elif o == "--attachments-dir":
            attachments_dir = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if proposals_csv is None:
        sys.stderr.write("ERROR: need --proposals-csv\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    comp = competition.CsvBasedCompetition(
        proposals_csv, "LFC100Change2020", "Review Number", pare
    )
    comp.transform_sheet(competition.ColumnRenamer("Review Number", "Application #"))
    comp.rekey("Application #")
    comp.add_supplemental_information(competition.MediaWikiTitleAdder("Project Title"))
    comp.add_supplemental_information(
        competition.GlobalViewMediaWikiTitleAdder("100Change2020", "Project Title")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Competition Name", "100Change2020")
    )

    fix_cell_processor = competition.FixCellProcessor()
    comp.process_all_cells_special(fix_cell_processor)
    fix_cell_processor.report()

    ots_metadata = process_ots_metadata(ots_metadata_csv)

    if judge_evaluation_csv is not None:
        comp.add_supplemental_information(
            competition.EvaluationAdder(
                "Peer",
                judge_evaluation_csv,
                app_col_name="Application #",
                score_rank_normalized_col_name="OverallScoreRankNormalized",
                sum_of_scores_normalized_col_name="SumOfScoresNormalized",
                trait_col_name="Trait",
                score_normalized_col_name="TraitScoreNormalized",
                comments_col_name="TraitJudgeComment",
                comments_score_normalized_col_name="TraitScoreNormalized",
            )
        )

    if wisehead_evaluation_csv is not None:
        comp.add_supplemental_information(
            competition.EvaluationAdder(
                "Panel",
                wisehead_evaluation_csv,
                app_col_name="Application #",
                score_rank_normalized_col_name="OverallScoreRankNormalized",
                sum_of_scores_normalized_col_name="SumOfScoresNormalized",
                trait_col_name="Trait",
                score_normalized_col_name="TraitScoreNormalized",
                comments_col_name="TraitJudgeComment",
                comments_score_normalized_col_name="TraitScoreNormalized",
            )
        )

    comp.add_supplemental_information(
        competition.LinkedSecondSheet(
            wisehead_corrected_scores_csv,
            "Review #",
            [
                {
                    "source_name": "Overall Rank",
                    "target_name": "Panel Overall Score Rank Normalized",
                },
                {
                    "source_name": "Score Total",
                    "target_name": "Panel Sum of Scores Normalized",
                },
            ],
        )
    )

    admin_review = competition.AdminReview(admin_review_csv, "Application #", "Status")
    comp.add_supplemental_information(admin_review)
    comp.filter_proposals(admin_review)

    comp.add_supplemental_information(TRDisqualifiedAdder(ots_metadata))
    comp.add_supplemental_information(WildcardEligibleAdder())
    comp.add_supplemental_information(WildcardAdder(ots_metadata))
    # Must come after TR DQed and Wildcard
    comp.add_supplemental_information(ApplicationLevelAdder())

    comp.process_cells_special("Priority Populations", competition.ToListProcessor())

    sdg_list = [
        "No Poverty",
        "Zero Hunger",
        "Good Health and Well-being",
        "Quality Education",
        "Gender Equality",
        "Clean Water and Sanitation",
        "Affordable and Clean Energy",
        "Decent Work and Economic Growth",
        "Industry, Innovation and Infrastructure",
        "Reduced Inequality",
        "Sustainable Cities and Communities",
        "Responsible Consumption and Production",
        "Climate Action",
        "Life Below Water",
        "Life on Land",
        "Peace and Justice Strong Institutions",
        "Partnerships to achieve the Goal",
    ]

    comp.process_cells_special(
        "Sustainable Development Goals",
        competition.ToSpecifiedListProcessor(sdg_list),
    )
    comp.process_cells_special(
        "Sustainable Development Goals",
        competition.SustainableDevelopmentGoalProcessor(sdg_list),
    )

    for correction_file in correction_files:
        correction_processor = competition.CorrectionData(
            "Review Number", correction_file
        )
        for column in correction_processor.columns_affected():
            comp.process_cells_special(column, correction_processor)

    attachments = competition.RegexSpecifiedAttachments(
        comp.sorted_proposal_keys, attachments_dir
    )

    attachments.specify_new_subcolumn("Financial Attachment", "Financials Attachment")
    attachments.specify_new_subcolumn(
        "Tech Review Attachment", "Tech Review Attachment"
    )
    attachments.specify_new_subcolumn(
        ".*Tech Review Redacted.*", "Tech Review Redacted Attachment"
    )
    attachments.specify_new_subcolumn("MOU Attachment", "MOU Attachment")
    attachments.specify_new_subcolumn(
        "Application Attachment", "Application Attachment"
    )
    attachments.specify_new_subcolumn("COVID_.*", "COVID Response Attachment")
    attachments.specify_new_subcolumn(".*_Prospectus.pdf", "Prospectus Attachment")
    attachments.specify_new_subcolumn(".*_Overview.pdf", "Overview Attachment")
    attachments.specify_new_subcolumn(
        ".*_Appendix.*.pdf", "Prospectus Appendix Attachments"
    )
    attachments.specify_new_subcolumn("Two Page Fact Sheet", "Fact Sheet Attachment")
    for attachment in attachments.attachments:
        if (
            ots_metadata.get(attachment.key, {}).get("Financial Attachment", "")
            == attachment.file
        ):
            attachment.subcolumn_name = "Financials Attachment"
        elif (
            ots_metadata.get(attachment.key, {}).get("MOU Attachment", "")
            == attachment.file
        ):
            attachment.subcolumn_name = "MOU Attachment"
        elif (
            ots_metadata.get(attachment.key, {}).get("Tech Review Attachment", "")
            == attachment.file
        ):
            attachment.subcolumn_name = "Tech Review Attachment"
        elif (
            ots_metadata.get(attachment.key, {}).get("Two Page Fact Sheet", "")
            == attachment.file
        ):
            attachment.subcolumn_name = "Fact Sheet Attachment"
        elif (
            ots_metadata.get(attachment.key, {}).get("Application Attachment", "")
            == attachment.file
        ):
            attachment.subcolumn_name = "Application Attachment"
    comp.add_supplemental_information(attachments)
    AppendixDisplayNames().clean(attachments.attachments)

    comp.transform_sheet(
        competition.LocationCombiner(
            column_name="Organization",
            address_1="Street Address",
            city="City",
            state="State",
            locality="Locality",
            country="Country",
            zip_postal="Zip Postal Code",
        )
    )

    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Participant",
            first_name="First Name",
            last_name="Last Name",
            email="Email",
        )
    )
    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Primary Contact",
            first_name="Primary Contact First Name",
            last_name="Primary Contact Last Name",
            title="Primary Contact Title",
            phone="Primary Contact Phone",
            email="Primary Contact Email",
        )
    )
    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Secondary Contact",
            first_name="Secondary Contact First Name",
            last_name="Secondary Contact Last Name",
            title="Secondary Contact Title",
            phone="Secondary Contact Phone",
            email="Secondary Contact Email",
        )
    )
    for num in ["1", "2", "3"]:
        comp.transform_sheet(
            competition.PersonCombiner(
                column_name="Key Staff #%s" % num,
                first_name="Key Staff #%s: Firstname" % num,
                last_name="Key Staff #%s: Lastname" % num,
            )
        )

        comp.transform_sheet(
            competition.ColumnRenamer(
                "Key Staff #%s: Association" % num, "Key Staff #%s Affiliation" % num
            )
        )
        comp.transform_sheet(
            competition.ColumnRenamer(
                "Key Staff #%s: Biography" % num, "Key Staff #%s Biography" % num
            )
        )

    for old_work_type, new_work_type in zip(
        ["Current Solution", "Future Work"], ["Current Work", "Future Work"]
    ):
        for old_num, new_num in zip(
            ["", "2", "3", "4", "5"], ["1", "2", "3", "4", "5"]
        ):
            comp.transform_sheet(
                competition.LocationCombiner(
                    column_name="%s #%s" % (new_work_type, new_num),
                    state="Location Of %s%s State" % (old_work_type, old_num),
                    locality="Location Of %s%s Locality" % (old_work_type, old_num),
                    country="Location Of %s%s Country" % (old_work_type, old_num),
                )
            )
            comp.remove_information(
                competition.ColumnRemover(
                    "Location Of %s%s Country id" % (old_work_type, old_num)
                )
            )
            comp.remove_information(
                competition.ColumnRemover(
                    "Location Of %s%s State id" % (old_work_type, old_num)
                )
            )
            comp.remove_information(
                competition.ColumnRemover(
                    "Location Of %s%s Locality id" % (old_work_type, old_num)
                )
            )

    comp.add_whitelist_exception("Did Apply", "Application")
    comp.add_whitelist_exception("Principal Organization", "Application")
    comp.add_whitelist_exception("COVID-19 Impact", "Application")
    comp.add_whitelist_exception("Type of Evidence", "Application")
    comp.add_whitelist_exception("Durability of Impact", "Application")
    comp.add_whitelist_exception("Project Phase #1: Name", "Application")
    comp.add_whitelist_exception("Project Phase #1: Duration", "Application")
    comp.add_whitelist_exception("Project Phase #1: Description", "Application")
    comp.add_whitelist_exception("Project Phase #2: Name", "Application")
    comp.add_whitelist_exception("Project Phase #2: Duration", "Application")
    comp.add_whitelist_exception("Project Phase #2: Description", "Application")
    comp.add_whitelist_exception("Project Phase #3: Name", "Application")
    comp.add_whitelist_exception("Project Phase #3: Duration", "Application")
    comp.add_whitelist_exception("Project Phase #3: Description", "Application")
    comp.add_whitelist_exception("Phase #1: Budget Sub-Total", "Application")
    comp.add_whitelist_exception("Phase #2: Budget Sub-Total", "Application")
    comp.add_whitelist_exception("Phase #3: Budget Sub-Total", "Application")
    comp.add_whitelist_exception("Other Resource Requirements", "Application")
    comp.add_whitelist_exception("Financial Sustainability", "Application")
    comp.add_whitelist_exception("Wild Card Eligible", "Panel")
    comp.add_whitelist_exception("Wild Card", "Panel")
    comp.add_whitelist_exception("TR Disqualified", "Panel")

    comp.transform_sheet(competition.ColumnRenamer("Participant key", "GUID"))
    comp.transform_sheet(
        competition.ColumnRenamer("Organization Legal Name", "Organization Name")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Problem Statement", "Challenge Statement")
    )
    comp.transform_sheet(competition.ColumnRenamer("Hear About", "Source"))
    comp.transform_sheet(competition.ColumnRenamer("Youtube Video", "Video"))
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Principal Organization Website or Social Media", "Organization Website"
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Case of Partnership", "Case for Partnership")
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Demand to Address The Problem", "Community Engagement"
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Diversity Equity and Inclusion", "Diversity-Equity-Inclusion"
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Project Website or Social Media Page",
            "Project Website",
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Technical Process Description",
            "Innovation",
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Solution Stage",
            "Project Focus",
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Key Words",
            "Key Words and Phrases",
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Monitoring Evaluation and Learning",
            "Measurement of Results",
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Planning for Scale and Amplifying Impact",
            "Ability To Scale",
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Identification Number of Principal Organization",
            "Applicant Organization Identification Authority",
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Identification Number of Principal Organization ein",
            "Applicant Tax Identification Number",
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Application Level",
            "Achievement Level",
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Funder #1: Name",
            "Funder #1",
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Funder #2: Name",
            "Funder #2",
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Funder #3: Name",
            "Funder #3",
        )
    )

    comp.remove_information(competition.ColumnRemover("Participant key and Domain"))
    comp.remove_information(competition.ColumnRemover("Country ID"))
    comp.remove_information(competition.ColumnRemover("State ID"))
    comp.remove_information(competition.ColumnRemover("Locality ID"))
    comp.remove_information(competition.ColumnRemover("Priority Populations IDs"))
    comp.remove_information(competition.ColumnRemover("Primary Subject Area ID"))
    comp.remove_information(
        competition.ColumnRemover("Primary Subject Area Category ID")
    )
    comp.remove_information(competition.ColumnRemover("Primary Area of Expertise ID"))

    comp.sort("Panel Overall Score Rank Normalized", True)

    comp.add_toc(toc.GenericToc("Topic_TOC", "Primary Subject Area Category"))
    comp.add_toc(toc.GenericListToc("Population_TOC", "Priority Populations"))

    table_toc_formatter = toc.WikiTableTocProposalFormatter(
        [
            {
                "name": "Organization Legal Name",
                "heading": "Organization",
            },
            {
                "name": "Project Title",
                "heading": "Title",
                "link": True,
            },
            {
                "name": "Application #",
                "heading": "ID #",
                "right_aligned": True,
            },
            {
                "name": "Panel Overall Score Rank Normalized",
                "heading": "Rank",
                "right_aligned": True,
            },
        ]
    )

    all_proposals = toc.ListToc("AllProposals")
    all_proposals.proposal_formatter = table_toc_formatter
    comp.add_toc(all_proposals)

    finalist_candidates = toc.ListToc("Finalist_Candidates")
    finalist_candidates.proposals = [
        p
        for p in comp.ordered_proposals()
        if (
            int(p.cell("Panel Overall Score Rank Normalized")) < 101
            or p.cell("Wild Card") == "Wild Card"
        )
        and p.cell("TR Disqualified") != "TR Disqualified"
    ]
    finalist_candidates.proposal_formatter = table_toc_formatter
    comp.add_toc(finalist_candidates)

    comp.add_toc(
        toc.GeographicToc(
            "Geographic_TOC",
            [
                "Current Work #1 Location",
                "Current Work #2 Location",
                "Current Work #3 Location",
                "Current Work #4 Location",
                "Current Work #5 Location",
                "Future Work #1 Location",
                "Future Work #2 Location",
                "Future Work #3 Location",
                "Future Work #4 Location",
                "Future Work #5 Location",
            ],
            [
                competition.LocationCombiner.REGION,
                competition.LocationCombiner.SUBREGION,
                competition.LocationCombiner.COUNTRY,
            ],
        )
    )
    comp.add_toc(
        toc.GenericListToc(
            "SDG_TOC",
            "Sustainable Development Goals",
            competition.SustainableDevelopmentGoalProcessor.official_sdgs,
        )
    )

    comp.process_tocs()

    if tdc_config_dir is not None:
        create_tdc_config(tdc_config_dir, comp)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )
    my_wiki.collection_only = collection_only
    my_wiki.upload_collection(comp)
    my_wiki.upload_attachments(attachments.attachments)


if __name__ == "__main__":
    main()
