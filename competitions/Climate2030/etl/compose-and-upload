#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017, 2019, 2020 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Compose all of the Lever for Change Climate 2030 Proposal CSV files.

Usage:

  $ compose-and-upload \\
       --proposals-csv=PROPOSALS_CSV \\
       --attachments-dir=ATTACHMENTS_DIR \\
       --judge-evaluation-csv=JUDGE_EVALUATION_CSV \\
       --expert-panel-evaluation-csv=EXPERT_PANEL_EVALUATION_CSV \\
       --lfc-analysis-pages=LFC_ANALYSIS_APGES_DAT \\
       --tdc-config-dir=TDC_CONFIG_DIR \\
       --pare=PARE \\
       --csv-only

Command-line options:
  --proposals-csv FILE            FILE is a CSV file representing the bulk
                                  of the proposal information

  --attachments-dir DIR           DIR is a directory for compose-csvs to look in for what attachments
                                  will be uploaded to the torque wiki.  It needs to have subdirectories
                                  by proposal number.

  --judge-evaluation-csv FILE     FILE is a CSV file with a many to one relationshp
                                  between judges and the proposals they evaluated,
                                  with the extra data being their evaluation

  --expert-panel-evaluation-csv FILE    FILE is a CSV file with a row for each proposal
                                  that includes the rank and scoring for the expert panel
                                  review, but none of the comments.

  --financial-sheets-dir DIR      DIR is the location for financial data csvs in a very specific
                                  format that's handled by FinancialDataAdder.  They get
                                  transformed into json and then displayed on ont he LFC Analysis pages.

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.

  --lfc-analysis-pages FILE       FILE is a simle newline separated list of proposal keys
                                  for which LFC Analysis pages should be generated.

  --pare ARG                      If ARG is a number, reduce the number of items to 1/ARG.  If
                                  ARG begins with +, then ARG is a comma separated list of
                                  keys to include.  If ARG begins with @, then ARG is a
                                  file with a list of keys to include.  For both + and @,
                                  the list of keys will be limited to only the ones provided.

  --csv-only                      Only upload the created CSV file.  Don't upload attachments or
                                  create wiki pages.  For use to speed up process when wiki has been
                                  created already.
"""

from etl import competition, wiki, toc, tdc
import config
import getopt
import sys
import os


class LFCAnalysisAdder(competition.InformationAdder):
    """Adds the columns for the LFC Analysis, all empty because these
    cells are there to be edited upon later"""

    def column_names(self):
        return [
            "LFC Analysis: Recommendation",
            "LFC Analysis: Short Description",
            "LFC Analysis: Overview",
            "LFC Analysis: IMPACTFUL Summary",
            "LFC Analysis: FEASIBLE Summary",
            "LFC Analysis: SCALABILITY Summary",
            "LFC Analysis: DURABLE Summary",
            "LFC Analysis: Strength of Approach",
            "LFC Analysis: Risks and Challenges",
            "LFC Analysis: Internet Scan",
            "LFC Analysis: Diversity, Equity and Inclusion",
            "LFC Analysis: Observations",
            "LFC Analysis: Financial Overview",
            "LFC Analysis: Funding Overview",
        ]

    def cell(self, proposal, column_name):
        return ""


def main():
    """Compose the LFC input and emit it as html-ized csv."""
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "proposals-csv=",
                "judge-evaluation-csv=",
                "expert-panel-evaluation-csv=",
                "lfc-analysis-pages=",
                "tdc-config-dir=",
                "attachments-dir=",
                "financial-sheets-dir=",
                "pare=",
                "csv-only",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    proposals_csv = None
    judge_evaluation_csv = None
    expert_panel_evaluation_csv = None
    lfc_analysis_pages = None
    attachments_dir = None
    financial_sheets_dir = None
    tdc_config_dir = None
    pare = None
    csv_only = False
    for o, a in opts:
        if o == "--proposals-csv":
            proposals_csv = a
        elif o == "--pare":
            pare = a
        elif o == "--csv-only":
            csv_only = True
        elif o == "--judge-evaluation-csv":
            judge_evaluation_csv = a
        elif o == "--expert-panel-evaluation-csv":
            expert_panel_evaluation_csv = a
        elif o == "--lfc-analysis-pages":
            lfc_analysis_pages = a
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        elif o == "--attachments-dir":
            attachments_dir = a
        elif o == "--financial-sheets-dir":
            financial_sheets_dir = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if proposals_csv is None:
        sys.stderr.write("ERROR: need --proposals-csv option.\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    comp = competition.Competition(proposals_csv, "Climate2030", "Application #", pare)
    comp.add_supplemental_information(competition.MediaWikiTitleAdder("Project Title"))
    comp.add_supplemental_information(
        competition.GlobalViewMediaWikiTitleAdder("Climate2030", "Project Title")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Competition Name", "Climate2030")
    )

    fix_cell_processor = competition.FixCellProcessor()
    comp.process_all_cells_special(fix_cell_processor)
    fix_cell_processor.report()

    comp.filter_proposals(
        competition.ColumnEqualsProposalFilter("Admin Review Status", "Not submitted")
    )
    comp.process_cells_special("Priority Populations", competition.MultiLineProcessor())
    comp.process_cells_special("Project Focus", competition.MultiLineProcessor())
    comp.process_cells_special("Total Projected Costs", competition.NumberCommaizer())
    comp.process_cells_special("Budget data", competition.BudgetTableProcessor())

    attachments = competition.BasicAttachments(
        comp.sorted_proposal_keys, attachments_dir
    )
    comp.add_supplemental_information(attachments)
    comp.add_supplemental_information(
        competition.EvaluationAdder(
            "Judge",
            judge_evaluation_csv,
            app_col_name="Application #",
            score_rank_normalized_col_name="OverallScoreRankNormalized",
            sum_of_scores_normalized_col_name="SumOfScoresNormalized",
            trait_col_name="Trait",
            score_normalized_col_name="TraitScoreNormalized",
            comments_col_name="TraitJudgeComment",
            comments_score_normalized_col_name="TraitScoreNormalized",
        )
    )
    comp.add_supplemental_information(
        competition.EvaluationAdder(
            "Panel",
            expert_panel_evaluation_csv,
            app_col_name="Application #",
            score_rank_normalized_col_name="OverallScoreRankNormalized",
            sum_of_scores_normalized_col_name="SumOfScoresNormalized",
            trait_col_name="Trait",
            score_normalized_col_name="TraitScoreNormalized",
            comments_col_name="TraitJudgeComment",
            comments_score_normalized_col_name="TraitScoreNormalized",
        )
    )
    comp.add_supplemental_information(LFCAnalysisAdder())
    comp.add_supplemental_information(
        competition.FinancialDataAdder(
            financial_sheets_dir,
            [
                {"name": "revenues", "text": "Revenues"},
                {
                    "name": "unrestricted2",
                    "text": "% unrestricted [2]",
                    "percent": True,
                },
                {"name": "expenses", "text": "Expenses (after depreciation)"},
                {
                    "name": "surplus",
                    "text": "Unrestricted surplus (after depreciation)",
                },
                {
                    "name": "months3",
                    "text": "Months of liquid unrestricted net assets (LUNA) [3]",
                },
                {
                    "name": "magnitudedeficits4",
                    "text": "Magnitude of deficits  (change in unrestricted net assets / average expenses over time period) [4]",
                    "percent": True,
                },
            ],
        )
    )

    comp.sort("Panel Overall Score Rank Normalized", True)

    list_toc = toc.ListToc("All_Proposals")

    def title_column(group_var_name, id_var_name):
        template = "[[{{ %s[%s]['%s'] }}|{{ %s[%s]['%s'] }}]]<br>" % (
            group_var_name,
            id_var_name,
            competition.MediaWikiTitleAdder.title_column_name,
            group_var_name,
            id_var_name,
            "Project Title",
        )
        template += "<div style='text-indent:20px'>{{ %s[%s]['%s'] }}</div>" % (
            group_var_name,
            id_var_name,
            "Project Description",
        )
        return template

    list_toc.proposal_formatter = toc.WikiTableTocProposalFormatter(
        [
            {
                "name": "Organization Name",
                "heading": "Organization",
            },
            {
                "processor": title_column,
                "heading": "Title",
            },
            {
                "name": "Application #",
                "heading": "ID #",
                "right_aligned": True,
            },
            {
                "name": "Panel Overall Score Rank Normalized",
                "heading": "Rank",
                "right_aligned": True,
            },
        ]
    )
    comp.add_toc(list_toc)

    comp.add_toc(toc.GenericMultiLineToc("Populations", "Priority Populations"))
    comp.add_toc(toc.GenericMultiLineToc("Project_Focus", "Project Focus"))

    comp.add_toc(
        toc.GenericToc(
            "Annual_Budgets",
            "Annual Operating Budget",
            [
                "Less than $1 Million",
                "$1.0 to 5.0 Million",
                "$5.1 to 10 Million",
                "$10.1 to 25 Million",
                "$25.1 to 50 Million",
                "$50.1 to 100 Million",
                "$100.1 to 500 Million",
                "$500.1 Million to $1 Billion",
                "$1 Billion +",
            ],
        )
    )

    comp.add_toc(
        toc.GenericToc(
            "Number_of_Employees",
            "Number of Employees",
            [
                "Fewer than 10 Full-time Employees",
                "10 to 25 Full-time Employees",
                "26 to 50 Full-time Employees",
                "51 to 100 Full-time Employees",
                "101 to 300 Full-time Employees",
                "301 to 500 Full-time Employees",
                "501 to 1,000 Full-time Employees",
                "1,000+ Full-time Employees",
            ],
        )
    )

    comp.add_toc(
        toc.GeographicToc(
            "Current_Work_Locations",
            [
                [
                    "Location of Current Work #1 Country",
                    "Location of Current Work #1 State /Province",
                ],
                [
                    "Location of Current Work #2 Country",
                    "Location of Current Work #2 State /Province",
                ],
                [
                    "Location of Current Work #3 Country",
                    "Location of Current Work #3 State /Province",
                ],
                [
                    "Location of Current Work #4 Country",
                    "Location of Current Work #4 State /Province",
                ],
                [
                    "Location of Current Work #5 Country",
                    "Location of Current Work #5 State /Province",
                ],
            ],
        )
    )

    comp.add_toc(
        toc.GeographicToc(
            "Future_Work_Locations",
            [
                [
                    "Location of Future Work #1 Country",
                    "Location of Future Work #1 State / Province",
                ],
                [
                    "Location of Future Work #2 Country",
                    "Location of Future Work #2 State /Province",
                ],
                [
                    "Location of Future Work #3 Country",
                    "Location of Future Work #3 State /Province",
                ],
                [
                    "Location of Future Work #4 Country",
                    "Location of Future Work #4 State /Province",
                ],
                [
                    "Location of Future Work #5 Country",
                    "Location of Future Work #5 State /Province",
                ],
            ],
        )
    )

    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.ValidProposals(comp, "Admin Review Status", "Valid").generate(
            tdc_config_dir
        )
        tdc.AllColumns(comp).generate(tdc_config_dir)
        tdc.ProcessedSpreadsheet(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )
    my_wiki.csv_only = csv_only
    my_wiki.upload_sheet(comp)
    my_wiki.upload_attachments(attachments.attachments)

    for proposal in comp.proposals.values():
        my_wiki.create_page(
            "Evaluations of %s" % proposal.cell("MediaWiki Title"),
            "{{ #tdcrender:Climate2030/id/" + proposal.key() + ".mwiki|Evaluations }}",
        )

    with open(lfc_analysis_pages) as f:
        for key in f.read().splitlines():
            if key in comp.proposals:
                proposal = comp.proposals[key]
                my_wiki.create_page(
                    "LFC Analysis of %s" % proposal.cell("MediaWiki Title"),
                    "{{ #tdcrender:Climate2030/id/" + key + ".mwiki|LFCAnalysis }}",
                )


if __name__ == "__main__":
    main()
