#!/usr/bin/env python3

__doc__ = """\
Compose all of the Lever for Change Climate 2030 Proposal CSV files.

Usage:

  $ populate-wiki \\
          --tdc-config-dir=TDC_CONFIG_DIR \\
          --competition=NAME --competition-csv=FILE \\
          --competition=NAME2 --competition-csv=FILE2 \\
          ...

Command-line options:
  --competition NAME              NAME is the name of a competition that lines up
                                  one to one with competition-csv below

  --competition-csv FILE          FILE is a CSV file representing the output of
                                  a competition's etl pipeline.

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.
"""

from etl import competition, wiki, toc, tdc
import config
import getopt
import sys
import os
import csv


competition_configs = {
    "LoneStar2020": {
        "key": "Application #",
        "title": "Project Title",
        "sheet_name": "LoneStar2020",
        "wiki_key": "LoneStar2020",
        "priority_populations": "Priority Populations",
        "annual_operating_budget": "Annual Operating Budget",
        "organization_name": "Organization Name",
        "organization_geography": ["Org State/Province", "Org Country"],
        "rank": "Panel Overall Score Rank Normalized",
        "score": "Panel Sum of Scores Normalized",
        "status": "Admin Review Status",
    },
    "LLIIA2020": {
        "key": "Application #",
        "title": "Project Title",
        "sheet_name": "LLIIA2020",
        "wiki_key": "LLIIA2020",
        "priority_populations": "Priority Populations",
        "annual_operating_budget": "Annual Operating Budget",
        "organization_name": "Organization Name",
        "organization_geography": ["Org State / Province", "Org Country"],
        "rank": "Panel Overall Score Rank Normalized",
        "score": "Panel Sum of Scores Normalized",
        "status": "Valid",
    },
    "100Change2020": {
        "key": "Review Number",
        "title": "Project Title",
        "sheet_name": "LFC100Change2020",
        "wiki_key": "100Change2020",
        "priority_populations": "Priority Populations",
        "organization_name": "Organization Legal Name",
        "organization_ein": "Identification Number of Principal Organization ein",
        "organization_geography": ["State", "Country"],
        "rank": "Wise Head Overall Score Rank Normalized",
        "score": "Wise Head Sum of Scores Normalized",
        "status": "Valid",
        "sdg": "Sustainable Development Goals",
    },
    "100Change2017": {
        "key": "Review_Number",
        "title": "Registered Organization Name",
        "sheet_name": "LFC100Change2017",
        "wiki_key": "100Change2017",
        "organization_name": "Registered Organization Name",
        "organization_geography": ["State / Province / Region", "Country"],
    },
    "EO2020": {
        "key": "Application #",
        "title": "Project Title",
        "sheet_name": "EO2020",
        "wiki_key": "EO2020",
        "priority_populations": "Priority Populations",
        "annual_operating_budget": "Annual Operating Budget",
        "organization_name": "Organization Name",
        "organization_ein": "EIN",
        "organization_geography": ["State / Province", "Nation"],
        "rank": "Judge Overall Score Rank Normalized",
        "score": "Judge Sum of Scores Normalized",
        "status": "Valid",
    },
    "RacialEquity2030": {
        "key": "Application #",
        "title": "Project Title",
        "sheet_name": "RacialEquity2030",
        "wiki_key": "RacialEquity2030",
        "priority_populations": "Priority Populations",
        "annual_operating_budget": "Annual Operating Budget",
        "organization_name": "Organization name",
        "organization_ein": "Applicant Tax Identification Number",
        "organization_geography": ["Applicant State / Province", "Applicant  Country"],
        "rank": "Peer to Peer Overall Score Rank Normalized",
        "score": "Peer to Peer Sum of Scores Normalized",
        "status": "Admin Review Status",
        "sdg": "Sustainable Development Goals",
    },
    "Climate2030": {
        "key": "Application #",
        "title": "Project Title",
        "sheet_name": "Climate2030",
        "wiki_key": "Climate2030",
        "priority_populations": "Priority Populations",
        "annual_operating_budget": "Annual Operating Budget",
        "organization_name": "Organization Name",
        "organization_ein": "EIN",
        "organization_geography": ["Org State/Province", "Org Country"],
        "rank": "Panel Overall Score Rank Normalized",
        "score": "Panel Sum of Scores Normalized",
        "status": "Admin Review Status",
    },
    "ECW2020": {
        "key": "Application #",
        "title": "Project Title",
        "sheet_name": "ECW2020",
        "wiki_key": "ECW2020",
        "priority_populations": "Priority Populations",
        "annual_operating_budget": "Annual Operating Budget",
        "organization_name": "Organization Name",
        "organization_ein": "EIN",
        "organization_geography": ["Org State/Province", "Org Country"],
        "rank": "Panel Overall Score Rank Normalized",
        "score": "Panel Sum of Scores Normalized",
        "status": "Admin Review Status",
    },
}


class GroupedScoreToc(toc.GenericToc):
    """Special case of Toc that groups the proposals by their score,
    in buckets of 5 (from 1-100)."""

    def __init__(self):
        super().__init__(
            "Score_Groups",
            [],
            initial_groupings=[
                ("%s to %s" % (n * 5, n * 5 + 5)) for n in range(19, -1, -1)
            ],
        )

    def process_competition(self, competition):
        import math

        self.competition_name = competition.name
        # self.data = { x: self.default_grouping(x) for x in groupings }

        for proposal in competition.ordered_proposals():
            if proposal.cell("Score"):
                # This assumes no one ever scores 100.  And really, who does?
                idx = 19 - math.floor(float(proposal.cell("Score")) / 5)

                self.data[self.groupings[idx]]["all_proposal_ids"].append(
                    proposal.key()
                )


class MultiCompAppsToc(toc.GenericToc):
    """Creates a report/toc for organizations that have applied more than
    once."""

    def __init__(self):
        self.name = "Multiple_Competition_Applications"
        self.sort = super().SortMethod.COUNT
        self.proposal_formatter = toc.WikiListTocProposalFormatter()

    def process_competition(self, competition):
        self.competition_name = competition.name

        self.orgs = []

        proposals_with_no_ein = []
        for proposal in competition.ordered_proposals():
            ein = proposal.cell("Organization EIN")
            found = False

            if ein:
                for org in self.orgs:
                    if org["ein"] == ein:
                        found = True
                        org["proposals"].append(proposal)
                        org["names"].append(proposal.cell("Organization Name"))
                        break

                if not found:
                    self.orgs.append(
                        {
                            "names": [proposal.cell("Organization Name")],
                            "ein": ein,
                            "proposals": [proposal],
                        }
                    )
            else:
                proposals_with_no_ein.append(proposal)

        for proposal in proposals_with_no_ein:
            name = proposal.cell("Organization Name")
            found = False
            for org in self.orgs:
                if name in org["names"]:
                    found = True
                    org["proposals"].append(proposal)
                    break

            if not found:
                self.orgs.append({"names": [name], "ein": "", "proposals": [proposal]})

    def grouped_data(self):
        data = []
        for org in self.orgs:
            org_title = "%s - %s" % (org["names"][0], org["ein"])
            datum = self.default_grouping(org_title)
            datum["all_proposal_ids"] = [p.key() for p in org["proposals"]]
            data.append(datum)
        return {"groups": data}

    def include_wiki_toc(self):
        return False


class GlobalViewMediaWikiOverride(competition.MediaWikiTitleAdder):
    """A MediaWikiTitleAdder that has a different title layout because it's tailored
    to GlobalView, so that it contains the independent competition sheet name.  This
    one takes over the MediaWiki Title place in the spreadsheet for uploading."""

    def __init__(self):
        pass

    def cell(self, proposal, column_name):
        title = "%s (%s: %s)" % (
            proposal.cell("Project Title"),
            proposal.cell("Wiki Key"),
            proposal.cell("Competition Application #"),
        )
        return self.sanitize_title(title)


def main():
    """Compose the LFC input and emit it as html-ized csv."""
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "competition-csv=",
                "competition=",
                "tdc-config-dir=",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    competition_names = []
    competition_csvs = []
    tdc_config_dir = None
    for o, a in opts:
        if o == "--competition":
            if a not in competition_configs:
                sys.stderr.write(
                    "ERROR: competition '%s' is not in our competition_configs\n" % a
                )
                sys.exit(2)
            competition_names.append(a)
        elif o == "--competition-csv":
            competition_csvs.append(a)
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if tdc_config_dir is None:
        sys.stderr.write("ERROR: need --tdc-config-dir option.\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    if len(competition_names) is 0 or len(competition_csvs) is 0:
        sys.stderr.write(
            "ERROR: need at least one --competition and --competition-csv option.\n\n"
        )
        sys.stderr.write(__doc__)
        sys.exit(1)

    if len(competition_names) is not len(competition_csvs):
        sys.stderr.write(
            "ERROR: number of --competition and --competition-csv options needs to be the same.\n\n"
        )
        sys.stderr.write(__doc__)
        sys.exit(1)

    csv_location = os.path.join(tdc_config_dir, "multi-competition-generated.csv")

    with open(csv_location, "w") as writer:
        csv_writer = csv.writer(
            writer, delimiter=",", quotechar='"', lineterminator="\n"
        )
        csv_writer.writerow(
            [
                "Global Application #",
                "Competition Name",
                "Competition Application #",
                "Rank",
                "Score",
                "Project Title",
                "Organization Name",
                "Organization EIN",
                "Organization State / Province",
                "Organization Country",
                "Wiki Key",
                "Sheet Name",
                "Priority Populations",
                "Sustainable Development Goals",
                "Annual Operating Budget",
                "Status",
            ]
        )

        for name, comp_csv in zip(competition_names, competition_csvs):
            csv_reader = csv.reader(
                open(comp_csv, encoding="utf-8"), delimiter=",", quotechar='"'
            )
            comp = competition.Competition(
                comp_csv, name, competition_configs[name]["key"], None, True
            )

            for proposal in comp.ordered_proposals():
                priority_populations = ""
                if "priority_populations" in competition_configs[name]:
                    priority_populations = proposal.cell(
                        competition_configs[name]["priority_populations"]
                    )
                annual_operating_budget = ""
                if "annual_operating_budget" in competition_configs[name]:
                    annual_operating_budget = proposal.cell(
                        competition_configs[name]["annual_operating_budget"]
                    )
                ein = ""
                if "organization_ein" in competition_configs[name]:
                    ein = proposal.cell(competition_configs[name]["organization_ein"])
                rank = ""
                if "rank" in competition_configs[name]:
                    rank = proposal.cell(competition_configs[name]["rank"])
                score = ""
                if "score" in competition_configs[name]:
                    score = proposal.cell(competition_configs[name]["score"])
                sdgs = ""
                if "sdg" in competition_configs[name]:
                    sdgs = proposal.cell(competition_configs[name]["sdg"])

                csv_writer.writerow(
                    [
                        "%s_%s" % (name, proposal.key()),
                        name,
                        proposal.key(),
                        rank,
                        score,
                        proposal.cell(competition_configs[name]["title"]),
                        proposal.cell(competition_configs[name]["organization_name"]),
                        ein,
                        proposal.cell(
                            competition_configs[name]["organization_geography"][0]
                        ),
                        proposal.cell(
                            competition_configs[name]["organization_geography"][1]
                        ),
                        competition_configs[name]["wiki_key"],
                        competition_configs[name]["sheet_name"],
                        priority_populations,
                        sdgs,
                        annual_operating_budget,
                        # We mark as valid in the case that there is no status so things get included
                        (
                            proposal.cell(competition_configs[name]["status"])
                            if "status" in competition_configs[name]
                            else "Valid"
                        ),
                    ]
                )

    comp = competition.Competition(csv_location, "GlobalView", "Global Application #")
    comp.process_cells_special(
        "Priority Populations", competition.ColumnTypeUpdater("list")
    )
    comp.process_cells_special(
        "Sustainable Development Goals", competition.ColumnTypeUpdater("list")
    )
    comp.process_cells_special("Project Title", competition.RemoveHTMLBRsProcessor())

    # Replacing BRs with spaces for this one, because of the data having new lines in
    # the middle of some organization names
    comp.process_cells_special(
        "Organization Name", competition.RemoveHTMLBRsProcessor(" ")
    )
    comp.add_supplemental_information(GlobalViewMediaWikiOverride())

    list_toc = toc.ListToc("All_Proposals")
    list_toc.proposal_formatter = toc.WikiTableTocProposalFormatter(
        [
            {
                "name": "Organization Name",
                "heading": "Organization",
            },
            {
                "name": "Project Title",
                "heading": "Title",
                "link": True,
            },
            {
                "name": "Competition Name",
                "heading": "Competition",
            },
            {
                "name": "Competition Application #",
                "heading": "ID #",
                "right_aligned": True,
            },
        ]
    )
    highly_ranked_toc = toc.ListToc("Highly_Ranked_Proposals")

    # Highly ranked is 25 or better
    highly_ranked_toc.proposals = sorted(
        [
            p
            for p in comp.ordered_proposals()
            if p.cell("Rank") and int(p.cell("Rank")) < 26
        ],
        key=lambda p: p.cell("Organization Name"),
    )

    highly_ranked_toc.proposal_formatter = toc.WikiTableTocProposalFormatter(
        [
            {
                "name": "Organization Name",
                "heading": "Organization",
            },
            {
                "name": "Project Title",
                "heading": "Title",
                "link": True,
            },
            {
                "name": "Competition Name",
                "heading": "Competition",
            },
            {
                "name": "Competition Application #",
                "heading": "ID #",
                "right_aligned": True,
            },
            {
                "name": "Rank",
                "heading": "Rank",
                "right_aligned": True,
            },
        ]
    )

    comp.add_toc(
        toc.RegionAwareGeographicToc(
            "Organization_Geography",
            [
                [
                    "Organization Country",
                    "Organization State / Province",
                ],
            ],
        )
    )

    comp.add_toc(list_toc)
    comp.add_toc(highly_ranked_toc)
    comp.add_toc(
        toc.GenericMultiLineToc(
            "Populations", "Priority Populations", None, toc.GenericToc.SortMethod.COUNT
        )
    )
    comp.add_toc(toc.AnnualBudgetToc("Annual Operating Budget"))
    comp.add_toc(GroupedScoreToc())
    comp.add_toc(MultiCompAppsToc())

    comp.add_toc(
        toc.GenericMultiLineToc(
            "Sustainable_Development_Goals",
            "Sustainable Development Goals",
            [
                "No Poverty",
                "Zero Hunger",
                "Good Health and Well-being",
                "Quality Education",
                "Gender Equality",
                "Clean Water and Sanitation",
                "Affordable and Clean Energy",
                "Decent Work and Economic Growth",
                "Industry, Innovation and Infrastructure",
                "Reduced Inequality",
                "Sustainable Cities and Communities",
                "Responsible Consumption and Production",
                "Climate Action",
                "Life Below Water",
                "Life on Land",
                "Peace and Justice Strong Institutions",
                "Partnerships for the Goals",
            ],
        )
    )

    comp.sort("Organization Name")
    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.ValidProposals(comp, "Status", "Valid").generate(tdc_config_dir)
        tdc.AllColumns(comp).generate(tdc_config_dir)
        tdc.ProcessedSpreadsheet(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )

    my_wiki.csv_only = True
    my_wiki.upload_sheet(comp)


    for proposal in comp.proposals.values():
        my_wiki.create_page(
            proposal.cell("MediaWiki Title"),
            "{{ #tdcrender:%s/id/%s.mwiki|false|%s }}"
            % (
                proposal.cell("Sheet Name"),
                proposal.cell("Competition Application #"),
                proposal.cell("Wiki Key"),
            ),
            False,
        )


if __name__ == "__main__":
    main()
