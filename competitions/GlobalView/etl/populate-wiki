#!/usr/bin/env python3

__doc__ = """\
Compose all of the Lever for Change Climate 2030 Proposal CSV files.

Usage:

  $ populate-wiki \\
          --tdc-config-dir=TDC_CONFIG_DIR \\
          --competition=NAME --competition-csv=FILE \\
          --competition=NAME2 --competition-csv=FILE2 \\
          ...

Command-line options:
  --competition NAME              NAME is the name of a competition that lines up
                                  one to one with competition-csv below

  --competition-csv FILE          FILE is a CSV file representing the output of
                                  a competition's etl pipeline.

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.
"""

from etl import competition, wiki, toc, tdc
import config
import getopt
import sys
import os
import csv


competition_configs = {
    "LoneStar2020": {
        "key": "Application #",
        "title": "Project Title",
        "sheet_name": "LoneStar2020",
        "wiki_key": "LoneStar2020",
        "priority_populations": "Priority Populations",
        "annual_operating_budget": "Annual Operating Budget",
        "organization_name": "Organization Name",
        "status": "Admin Review Status",
    },
    "LLIIA2020": {
        "key": "Application #",
        "title": "Project Title",
        "sheet_name": "LLIIA2020",
        "wiki_key": "LLIIA2020",
        "priority_populations": "Priority Populations",
        "annual_operating_budget": "Annual Operating Budget",
        "organization_name": "Organization Name",
        "status": "Valid",
    },
    "100Change2020": {
        "key": "Review Number",
        "title": "Project Title",
        "sheet_name": "LFC100Change2020",
        "wiki_key": "100Change2020",
        "priority_populations": "Priority Populations",
        "organization_name": "Organization Legal Name",
        "status": "Valid",
    },
    "100Change2017": {
        "key": "Review_Number",
        "title": "Registered Organization Name",
        "sheet_name": "LFC100Change2017",
        "wiki_key": "100Change2017",
        "organization_name": "Registered Organization Name",
    },
    "EO2020": {
        "key": "Application #",
        "title": "Project Title",
        "sheet_name": "EO2020",
        "wiki_key": "EO2020",
        "priority_populations": "Priority Populations",
        "organization_name": "Organization Name",
        "status": "Valid",
    },
    "RacialEquity2030": {
        "key": "Application #",
        "title": "Project Title",
        "sheet_name": "RacialEquity2030",
        "wiki_key": "RacialEquity2030",
        "priority_populations": "Priority Populations",
        "organization_name": "Organization name",
        "status": "Admin Review Status",
    },
    "Climate2030": {
        "key": "Application #",
        "title": "Project Title",
        "sheet_name": "Climate2030",
        "wiki_key": "Climate2030",
        "priority_populations": "Priority Populations",
        "annual_operating_budget": "Annual Operating Budget",
        "organization_name": "Organization Name",
        "status": "Admin Review Status",
    },
    "ECW2020": {
        "key": "Application #",
        "title": "Project Title",
        "sheet_name": "ECW2020",
        "wiki_key": "ECW2020",
        "priority_populations": "Priority Populations",
        "annual_operating_budget": "Annual Operating Budget",
        "organization_name": "Organization Name",
        "status": "Admin Review Status",
    },
}


class GlobalViewMediaWikiOverride(competition.MediaWikiTitleAdder):
    """A MediaWikiTitleAdder that has a different title layout because it's tailored
    to GlobalView, so that it contains the independent competition sheet name.  This
    one takes over the MediaWiki Title place in the spreadsheet for uploading."""

    def __init__(self):
        pass

    def cell(self, proposal, column_name):
        title = "%s (%s: %s)" % (
            proposal.cell("Project Title"),
            proposal.cell("Wiki Key"),
            proposal.cell("Competition Application #"),
        )
        return self.sanitize_title(title)


def main():
    """Compose the LFC input and emit it as html-ized csv."""
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "competition-csv=",
                "competition=",
                "tdc-config-dir=",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    competition_names = []
    competition_csvs = []
    tdc_config_dir = None
    for o, a in opts:
        if o == "--competition":
            if a not in competition_configs:
                sys.stderr.write(
                    "ERROR: competition '%s' is not in our competition_configs\n" % a
                )
                sys.exit(2)
            competition_names.append(a)
        elif o == "--competition-csv":
            competition_csvs.append(a)
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if tdc_config_dir is None:
        sys.stderr.write("ERROR: need --tdc-config-dir option.\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    if len(competition_names) is 0 or len(competition_csvs) is 0:
        sys.stderr.write(
            "ERROR: need at least one --competition and --competition-csv option.\n\n"
        )
        sys.stderr.write(__doc__)
        sys.exit(1)

    if len(competition_names) is not len(competition_csvs):
        sys.stderr.write(
            "ERROR: number of --competition and --competition-csv options needs to be the same.\n\n"
        )
        sys.stderr.write(__doc__)
        sys.exit(1)

    csv_location = os.path.join(tdc_config_dir, "multi-competition-generated.csv")

    with open(csv_location, "w") as writer:
        csv_writer = csv.writer(
            writer, delimiter=",", quotechar='"', lineterminator="\n"
        )
        csv_writer.writerow(
            [
                "Global Application #",
                "Competition Name",
                "Competition Application #",
                "Project Title",
                "Organization Name",
                "Wiki Key",
                "Sheet Name",
                "Priority Populations",
                "Annual Operating Budget",
                "Status",
            ]
        )

        for name, comp_csv in zip(competition_names, competition_csvs):
            csv_reader = csv.reader(
                open(comp_csv, encoding="utf-8"), delimiter=",", quotechar='"'
            )
            comp = competition.Competition(
                comp_csv, name, competition_configs[name]["key"], None, True
            )

            for proposal in comp.ordered_proposals():
                priority_populations = ""
                if "priority_populations" in competition_configs[name]:
                    priority_populations = proposal.cell(
                        competition_configs[name]["priority_populations"]
                    )
                annual_operating_budget = ""
                if "annual_operating_budget" in competition_configs[name]:
                    annual_operating_budget = proposal.cell(
                        competition_configs[name]["annual_operating_budget"]
                    )
                csv_writer.writerow(
                    [
                        "%s_%s" % (name, proposal.key()),
                        name,
                        proposal.key(),
                        proposal.cell(competition_configs[name]["title"]),
                        proposal.cell(competition_configs[name]["organization_name"]),
                        competition_configs[name]["wiki_key"],
                        competition_configs[name]["sheet_name"],
                        priority_populations,
                        annual_operating_budget,
                        # We mark as valid in the case that there is no status so things get included
                        (
                            proposal.cell(competition_configs[name]["status"])
                            if "status" in competition_configs[name]
                            else "Valid"
                        ),
                    ]
                )

    comp = competition.Competition(csv_location, "GlobalView", "Global Application #")
    comp.process_cells_special(
        "Priority Populations", competition.ColumnTypeUpdater("list")
    )
    comp.process_cells_special("Project Title", competition.RemoveHTMLBRsProcessor())

    # Replacing BRs with spaces for this one, because of the data having new lines in
    # the middle of some organization names
    comp.process_cells_special(
        "Organization Name", competition.RemoveHTMLBRsProcessor(" ")
    )
    comp.add_supplemental_information(GlobalViewMediaWikiOverride())

    list_toc = toc.ListToc("All_Proposals")
    list_toc.proposal_formatter = toc.WikiTableTocProposalFormatter(
        [
            {
                "name": "Organization Name",
                "heading": "Organization",
            },
            {
                "name": "Project Title",
                "heading": "Title",
                "link": True,
            },
            {
                "name": "Competition Name",
                "heading": "Competition",
            },
            {
                "name": "Competition Application #",
                "heading": "ID #",
                "right_aligned": True,
            },
        ]
    )

    comp.add_toc(list_toc)
    comp.add_toc(
        toc.GenericMultiLineToc(
            "Populations", "Priority Populations", None, toc.GenericToc.SortMethod.COUNT
        )
    )
    comp.add_toc(toc.AnnualBudgetToc("Annual Operating Budget"))
    comp.sort("Organization Name")
    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.ValidProposals(comp, "Status", "Valid").generate(tdc_config_dir)
        tdc.AllColumns(comp).generate(tdc_config_dir)
        tdc.ProcessedSpreadsheet(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )

    my_wiki.csv_only = True
    my_wiki.upload_sheet(comp)

    for proposal in comp.proposals.values():
        my_wiki.create_page(
            proposal.cell("MediaWiki Title"),
            "{{ #tdcrender:%s/id/%s.mwiki|false|%s }}"
            % (
                proposal.cell("Sheet Name"),
                proposal.cell("Competition Application #"),
                proposal.cell("Wiki Key"),
            ),
            False,
        )


if __name__ == "__main__":
    main()
