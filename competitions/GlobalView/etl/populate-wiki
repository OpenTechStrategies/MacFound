#!/usr/bin/env python3

__doc__ = """\
Compose all of the Lever for Change Climate 2030 Proposal CSV files.

Usage:

  $ populate-wiki \\
          --tdc-config-dir=TDC_CONFIG_DIR \\
          --competition=NAME --competition-csv=FILE \\
          --competition=NAME2 --competition-csv=FILE2 \\
          ...

Command-line options:
  --competition NAME              NAME is the name of a competition that lines up
                                  one to one with competition-csv below

  --competition-csv FILE          FILE is a CSV file representing the output of
                                  a competition's etl pipeline.

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.
"""

from etl import competition, wiki, toc, tdc
import config
import getopt
import sys
import os
import csv


competition_configs = {
    "LoneStar2020": {
        "sheet_name": "LoneStar2020",
        "wiki_key": "LoneStar2020",
        "rank": "Panel Overall Score Rank Normalized",
        "score": "Panel Sum of Scores Normalized",
    },
    "LLIIA2020": {
        "sheet_name": "LLIIA2020",
        "wiki_key": "LLIIA2020",
        "rank": "Panel Overall Score Rank Normalized",
        "score": "Panel Sum of Scores Normalized",
    },
    "100Change2020": {
        "sheet_name": "LFC100Change2020",
        "wiki_key": "100Change2020",
        "rank": "Wise Head Overall Score Rank Normalized",
        "score": "Wise Head Sum of Scores Normalized",
    },
    "100Change2017": {
        "sheet_name": "LFC100Change2017",
        "wiki_key": "100Change2017",
        "score": "Total_Score",
        "rank": "Ranking",
    },
    "EO2020": {
        "sheet_name": "EO2020",
        "wiki_key": "EO2020",
        "rank": "Judge Overall Score Rank Normalized",
        "score": "Judge Sum of Scores Normalized",
    },
    "RacialEquity2030": {
        "sheet_name": "RacialEquity2030",
        "wiki_key": "RacialEquity2030",
        "rank": "Panel Overall Score Rank Normalized",
        "score": "Panel Sum of Scores Normalized",
    },
    "Climate2030": {
        "sheet_name": "Climate2030",
        "wiki_key": "Climate2030",
        "rank": "Panel Overall Score Rank Normalized",
        "score": "Panel Sum of Scores Normalized",
    },
    "ECW2020": {
        "sheet_name": "ECW2020",
        "wiki_key": "ECW2020",
        "rank": "Panel Overall Score Rank Normalized",
        "score": "Panel Sum of Scores Normalized",
    },
    "Democracy22": {
        "sheet_name": "Democracy22",
        "wiki_key": "Democracy22",
    },
}


class GroupedScoreToc(toc.GenericToc):
    """Special case of Toc that groups the proposals by their score,
    in buckets of 5 (from 1-100)."""

    def __init__(self):
        super().__init__(
            "Score_Groups",
            [],
            initial_groupings=[
                ("%s to %s" % (n * 5, n * 5 + 5)) for n in range(19, -1, -1)
            ],
        )

    def process_competition(self, competition):
        import math

        self.competition_name = competition.name
        # self.data = { x: self.default_grouping(x) for x in groupings }

        for proposal in competition.ordered_proposals():
            if proposal.cell("Score"):
                # This assumes no one ever scores 100.  And really, who does?
                idx = 19 - math.floor(float(proposal.cell("Score")) / 5)

                self.data[self.groupings[idx]]["all_proposal_ids"].append(
                    proposal.key()
                )


class MultiCompAppsToc(toc.GenericToc):
    """Creates a report/toc for organizations that have applied more than
    once."""

    def __init__(self):
        self.name = "Multiple_Competition_Applications"
        self.sort = super().SortMethod.COUNT
        self.proposal_formatter = toc.WikiListTocProposalFormatter()

    def process_competition(self, competition):
        self.competition_name = competition.name

        self.orgs = []

        proposals_with_no_ein = []
        for proposal in competition.ordered_proposals():
            ein = proposal.cell("Organization EIN")
            found = False

            if ein:
                for org in self.orgs:
                    if org["ein"] == ein:
                        found = True
                        org["proposals"].append(proposal)
                        org["names"].append(proposal.cell("Organization Name"))
                        break

                if not found:
                    self.orgs.append(
                        {
                            "names": [proposal.cell("Organization Name")],
                            "ein": ein,
                            "proposals": [proposal],
                        }
                    )
            else:
                proposals_with_no_ein.append(proposal)

        for proposal in proposals_with_no_ein:
            name = proposal.cell("Organization Name")
            found = False
            for org in self.orgs:
                if name in org["names"]:
                    found = True
                    org["proposals"].append(proposal)
                    break

            if not found:
                self.orgs.append({"names": [name], "ein": "", "proposals": [proposal]})

    def grouped_data(self):
        data = []
        for org in self.orgs:
            org_title = "%s - %s" % (org["names"][0], org["ein"])
            datum = self.default_grouping(org_title)
            datum["all_proposal_ids"] = [p.key() for p in org["proposals"]]
            data.append(datum)
        return {"groups": data}

    def include_wiki_toc(self):
        return False


def main():
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "competition-json=",
                "competition=",
                "tdc-config-dir=",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    competition_names = []
    competition_jsons = []
    tdc_config_dir = None
    for o, a in opts:
        if o == "--competition":
            if a not in competition_configs:
                sys.stderr.write(
                    "ERROR: competition '%s' is not in our competition_configs\n" % a
                )
                sys.exit(2)
            competition_names.append(a)
        elif o == "--competition-json":
            competition_jsons.append(a)
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if tdc_config_dir is None:
        sys.stderr.write("ERROR: need --tdc-config-dir option.\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    if len(competition_names) == 0 or len(competition_jsons) == 0:
        sys.stderr.write(
            "ERROR: need at least one --competition and --competition-json option.\n\n"
        )
        sys.stderr.write(__doc__)
        sys.exit(1)

    if len(competition_names) != len(competition_jsons):
        sys.stderr.write(
            "ERROR: number of --competition and --competition-json options needs to be the same.\n\n"
        )
        sys.stderr.write(__doc__)
        sys.exit(1)

    columns = [
        "Global Application #",
        "Competition Application #",
        "Competition Name",
        "Rank",
        "Score",
        "Wiki Key",
        "Collection Name",
        "Project Title",
        "Organization Name",
        "Applicant Tax Identification Number",
        "Organization Location",
        "Priority Populations",
        "Sustainable Development Goals",
        "Annual Operating Budget",
        "Admin Review Status",
        "MediaWiki Title",
    ]

    gv_proposals = {}
    gv_keys = []
    for name, comp_json in zip(competition_names, competition_jsons):
        comp = competition.JsonBasedCompetition(comp_json, name, "Application #")

        for proposal in comp.ordered_proposals():
            gv_proposal = {c: proposal.cell(c) for c in columns}
            gv_key = ("%s_%s" % (name, proposal.key()),)
            gv_proposal["Global Application #"] = gv_key
            gv_proposal["Competition Application #"] = proposal.key()
            gv_proposal["Wiki Key"] = competition_configs[name]["wiki_key"]
            gv_proposal["Competition Name"] = name
            gv_proposal["MediaWiki Title"] = proposal.cell(
                competition.GlobalViewMediaWikiTitleAdder.title_column_name
            )

            if "rank" in competition_configs[name]:
                gv_proposal["Rank"] = proposal.cell(competition_configs[name]["rank"])
            if "score" in competition_configs[name]:
                gv_proposal["Score"] = proposal.cell(competition_configs[name]["score"])
            if not gv_proposal["Admin Review Status"]:
                gv_proposal["Admin Review Status"] = "Valid"
            if not gv_proposal["Sustainable Development Goals"]:
                gv_proposal["Sustainable Development Goals"] = []
            if not gv_proposal["Priority Populations"]:
                gv_proposal["Priority Populations"] = []
            if not gv_proposal["Project Title"]:
                gv_proposal["Project Title"] = gv_proposal["Organization Name"]

            gv_proposals[gv_key] = competition.Proposal(
                gv_proposal, "Global Application #"
            )
            gv_keys.append(gv_key)

    comp = competition.Competition(
        gv_proposals, columns, gv_keys, "GlobalView", "Global Application #"
    )
    comp.process_cells_special("Project Title", competition.RemoveHTMLBRsProcessor())
    comp.add_whitelist_exception("Global Application #", "Application")
    comp.add_whitelist_exception("Competition Application #", "Application")
    comp.add_whitelist_exception("Rank", "Confidential")
    comp.add_whitelist_exception("Score", "Confidential")
    comp.add_whitelist_exception("Wiki Key", "Application")
    comp.add_whitelist_exception("Collection Name", "Application")

    # Replacing BRs with spaces for this one, because of the data having new lines in
    # the middle of some organization names
    comp.process_cells_special(
        "Organization Name", competition.RemoveHTMLBRsProcessor(" ")
    )

    list_toc = toc.ListToc("All_Proposals")
    list_toc.proposal_formatter = toc.WikiTableTocProposalFormatter(
        [
            {
                "name": "Organization Name",
                "heading": "Organization",
            },
            {
                "name": "Project Title",
                "heading": "Title",
                "link": True,
            },
            {
                "name": "Competition Name",
                "heading": "Competition",
            },
            {
                "name": "Competition Application #",
                "heading": "ID #",
                "right_aligned": True,
            },
        ]
    )
    highly_ranked_toc = toc.ListToc("Highly_Ranked_Proposals")

    # Highly ranked is 25 or better
    highly_ranked_toc.proposals = sorted(
        [
            p
            for p in comp.ordered_proposals()
            # Chip and Semi are for 100Change2017
            if p.cell("Rank")
            and (
                p.cell("Rank") == "Chip"
                or p.cell("Rank") == "Semi"
                or int(p.cell("Rank")) < 26
            )
        ],
        key=lambda p: p.cell("Organization Name"),
    )

    highly_ranked_toc.proposal_formatter = toc.WikiTableTocProposalFormatter(
        [
            {
                "name": "Organization Name",
                "heading": "Organization",
            },
            {
                "name": "Project Title",
                "heading": "Title",
                "link": True,
            },
            {
                "name": "Competition Name",
                "heading": "Competition",
            },
            {
                "name": "Competition Application #",
                "heading": "ID #",
                "right_aligned": True,
            },
            {
                "name": "Rank",
                "heading": "Rank",
                "right_aligned": True,
            },
        ]
    )

    comp.add_toc(
        toc.GeographicToc(
            "Organization_Geography",
            [
                "Organization Location",
            ],
            [
                competition.LocationCombiner.REGION,
                competition.LocationCombiner.SUBREGION,
                competition.LocationCombiner.COUNTRY,
                competition.LocationCombiner.STATE,
            ],
        )
    )

    comp.add_toc(list_toc)
    comp.add_toc(highly_ranked_toc)
    comp.add_toc(
        toc.GenericListToc(
            "Populations", "Priority Populations", None, toc.GenericToc.SortMethod.COUNT
        )
    )
    comp.add_toc(toc.AnnualBudgetToc("Annual Operating Budget"))
    comp.add_toc(GroupedScoreToc())
    comp.add_toc(MultiCompAppsToc())

    comp.add_toc(
        toc.GenericListToc(
            "Sustainable_Development_Goals",
            "Sustainable Development Goals",
            competition.SustainableDevelopmentGoalProcessor.official_sdgs,
        )
    )

    comp.sort("Organization Name")
    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.ValidProposals(comp, "Status", "Valid").generate(tdc_config_dir)
        tdc.Columns(comp).generate(tdc_config_dir)
        tdc.ProcessedCollection(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )

    my_wiki.collection_only = True
    my_wiki.upload_collection(comp)

    for proposal in comp.proposals.values():
        my_wiki.create_page(
            proposal.cell("MediaWiki Title"),
            "{{ #tdcrender:%s/id/%s.mwiki|false|%s }}"
            % (
                proposal.cell("Collection Name"),
                proposal.cell("Competition Application #"),
                proposal.cell("Wiki Key"),
            ),
            False,
        )


if __name__ == "__main__":
    main()
