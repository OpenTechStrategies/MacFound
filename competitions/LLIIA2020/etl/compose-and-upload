#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017, 2019, 2020 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Compose all of the Lever for Change 2020 Larsen Lam CSV files.

Usage:

  $ compose-csvs \\
       --proposals-csv=PROPOSALS_CSV \\
       --admin-review-csv=ADMIN_REVIEW_CSV \\
       --judge-evaluation-csv=JUDGE_EVALUATION_CSV \\
       --panel-evaluation-csv=PANEL_EVALUATION_CSV \\
       --attachments-dir=ATTACHMENTS_DIR \\
       --tdc-config-dir=TDC_CONFIG_DIR \\
       --pare=PARE \\
       --collection-only

Command-line options:
  --proposals-csv FILE            FILE is a CSV file representing the bulk
                                  of the proposal information

  --admin-review-csv FILE         FILE is a CSV file representing which applications
                                  in PROPOSALS_CSV should be included

  --judge-evaluation-csv FILE     FILE is a CSV file with a many to one relationshp
                                  between judges and the proposals they evaluated,
                                  with the extra data being their evaluation

  --panel-evaluation-csv FILE     FILE is a CSV file with a many to one relationshp
                                  between a judge panel and the proposals they evaluated,
                                  with the extra data being their evaluation. This differs
                                  from judge-evalutation-csv because it's different judges

  --budget-csv FILE               FILE is a csv with the budget data in the specific format
                                  where lines are separated by || and columns are separated
                                  by |

  --attachments-dir DIR           DIR is a directory for compose-csvs to look in for what attachments
                                  will be uploaded to the torque wiki.  It needs to have subdirectories
                                  by proposal number.

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.

  --pare ARG                      If ARG is a number, reduce the number of items to 1/ARG.  If
                                  ARG begins with +, then ARG is a comma separated list of
                                  keys to include.  If ARG begins with @, then ARG is a
                                  file with a list of keys to include.  For both + and @,
                                  the list of keys will be limited to only the ones provided.

  --collection-only               Only upload the created CSV file.  Don't upload attachments or
                                  create wiki pages.  For use to speed up process when wiki has been
                                  created already.
"""

from etl import competition, wiki, toc, tdc, utils, Geocoder
import config
import getopt
import sys
import os
import csv
import json


class LFCAnalysisAdder(competition.InformationAdder):
    """Adds the columns for the LFC Analysis, all empty because these
    cells are there to be edited upon later"""

    def column_names(self):
        return ["LFC Analysis"]

    def cell(self, proposal, column_name):
        return {
            "Recommendation": "",
            "Short Description": "",
            "COMMUNITY-INFORMED Summary": "",
            "EVIDENCE-BASED Summary": "",
            "FEASIBLE Summary": "",
            "IMPACTFUL Summary": "",
            "Overview": "",
            "Strength of Approach": "",
            "Risks and Challenges": "",
            "Internet Scan": "",
            "Diversity, Equity and Inclusion": "",
            "Observations": "",
            "Financial Overview": "",
        }


class BudgetDataAdder(competition.InformationAdder):
    """Takes a BUDGET_CSV which represents a csv with budget information.
    The information is in column 7, while the application number to match
    is in column 3.

    It adds that as a json field to
    """

    def __init__(self, budget_csv):
        budget_reader = csv.reader(
            open(budget_csv, encoding="utf-8"), delimiter=",", quotechar='"'
        )
        from math import floor

        self.budget_data = {}
        next(budget_reader)
        for row in budget_reader:
            application_id = row[3]
            budget_text = row[7]
            budget_rows = budget_text.split("||")

            budget_row_data = []
            for budget_row in budget_rows:
                budget_items = budget_row.split("|")
                budget_amount = budget_items[1]
                try:
                    budget_amount = floor(float(budget_amount))
                    budget_amount = "{:,}".format(budget_amount)
                except Exception as e:
                    pass
                budget_row_data.append(
                    {"description": budget_items[0], "amount": budget_amount}
                )

            self.budget_data[application_id] = budget_row_data

    def column_names(self):
        return ["Budget Data"]

    def cell(self, proposal, column_name):
        if proposal.key() in self.budget_data:
            return self.budget_data[proposal.key()]
        else:
            return {}


class ProposalMapToc(toc.Toc):
    def __init__(self):
        self.name = "Proposal_Map"
        self.maps_dir = "templates"

    def template_file(self):
        from pathlib import Path

        return Path("%s/proposal_map.html" % self.maps_dir).read_text()

    def raw(self):
        return False


def main():
    """Compose the LFC input and emit it as html-ized csv."""
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "proposals-csv=",
                "admin-review-csv=",
                "judge-evaluation-csv=",
                "panel-evaluation-csv=",
                "budget-csv=",
                "top16-data-file=",
                "tdc-config-dir=",
                "attachments-dir=",
                "pare=",
                "collection-only",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    pare = None
    proposals_csv = None
    admin_review_csv = None
    judge_evaluation_csv = None
    panel_evaluation_csv = None
    budget_csv = None
    regionconfig_csv = None
    attachments_dir = None
    top16_data_file = None
    toc_dir = None
    tdc_config_dir = None
    pare = None
    collection_only = False
    for o, a in opts:
        if o == "--proposals-csv":
            proposals_csv = a
        elif o == "--pare":
            pare = a
        elif o == "--collection-only":
            collection_only = True
        elif o == "--admin-review-csv":
            admin_review_csv = a
        elif o == "--judge-evaluation-csv":
            judge_evaluation_csv = a
        elif o == "--panel-evaluation-csv":
            panel_evaluation_csv = a
        elif o == "--budget-csv":
            budget_csv = a
        elif o == "--top16-data-file":
            top16_data_file = a
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        elif o == "--attachments-dir":
            attachments_dir = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if proposals_csv is None:
        sys.stderr.write("ERROR: need --proposals-csv\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    comp = competition.CsvBasedCompetition(
        proposals_csv, "LLIIA2020", "Application #", pare
    )
    comp.add_supplemental_information(competition.MediaWikiTitleAdder("Project Title"))
    comp.add_supplemental_information(
        competition.GlobalViewMediaWikiTitleAdder("LLIIA2020", "Project Title")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Competition Name", "LLIIA2020")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Achievement Level", "")
    )

    fix_cell_processor = competition.FixCellProcessor()
    comp.process_all_cells_special(fix_cell_processor)
    fix_cell_processor.report()

    if judge_evaluation_csv is not None:
        comp.add_supplemental_information(
            competition.EvaluationAdder(
                "Peer",
                judge_evaluation_csv,
                app_col_name="Application #",
                score_rank_raw_col_name="OverallScoreRank",
                score_rank_normalized_col_name="OverallScoreRankNormalized",
                sum_of_scores_raw_col_name="SumOfScores",
                sum_of_scores_normalized_col_name="SumOfScoresNormalized",
                trait_col_name="Trait",
                score_raw_col_name="TraitScore",
                score_normalized_col_name="TraitScoreNormalized",
                comments_col_name="TraitJudgeComment",
                comments_score_raw_col_name="TraitScore",
                comments_score_normalized_col_name="TraitScoreNormalized",
                anonymous_judge_name_col_name="Anonymous Judge Name",
                primary_rank=False,
            )
        )

    if panel_evaluation_csv is not None:
        comp.add_supplemental_information(
            competition.EvaluationAdder(
                "Panel",
                panel_evaluation_csv,
                app_col_name="Application #",
                score_rank_raw_col_name="OverallScoreRank",
                score_rank_normalized_col_name="OverallScoreRankNormalized",
                sum_of_scores_raw_col_name="SumOfScores",
                sum_of_scores_normalized_col_name="SumOfScoresNormalized",
                trait_col_name="Trait",
                score_raw_col_name="TraitScore",
                score_normalized_col_name="TraitScoreNormalized",
                comments_col_name="TraitJudgeComment",
                comments_score_raw_col_name="TraitScore",
                comments_score_normalized_col_name="TraitScoreNormalized",
                anonymous_judge_name_col_name="AnonymousJudgeName",
                primary_rank=True,
            )
        )

    admin_review = competition.AdminReview(admin_review_csv, "Application #", "Status")
    comp.add_supplemental_information(admin_review)
    comp.filter_proposals(admin_review)
    comp.add_supplemental_information(LFCAnalysisAdder())
    if budget_csv is not None:
        comp.add_supplemental_information(BudgetDataAdder(budget_csv))

    comp.process_cells_special("Total Projected Costs", competition.NumberCommaizer())
    comp.process_cells_special("Priority Populations", competition.ToListProcessor())
    comp.process_cells_special("Key Words and Phrases", competition.ToListProcessor())
    comp.process_cells_special(
        "Annual Operating Budget",
        competition.AnnualBudgetProcessor(
            {
                competition.AnnualBudget.LESS_THAN_1_MIL: "Less than $1 Million",
                competition.AnnualBudget.BETWEEN_1_MIL_AND_5_MIL: "$1.0 to 5 Million",
                competition.AnnualBudget.BETWEEN_5_MIL_AND_10_MIL: "$5.1 to 10 Million",
                competition.AnnualBudget.BETWEEN_10_MIL_AND_25_MIL: "$10.1 to 25 Million",
                competition.AnnualBudget.BETWEEN_25_MIL_AND_50_MIL: "$25.1 to 50 Million",
                competition.AnnualBudget.BETWEEN_50_MIL_AND_100_MIL: "$50.1 to 100 Million",
                competition.AnnualBudget.BETWEEN_100_MIL_AND_500_MIL: "$100.1 to 500 Million",
                competition.AnnualBudget.BETWEEN_500_MIL_AND_1_BIL: "$500.1 Million to $1 Billion",
                competition.AnnualBudget.MORE_THAN_1_BIL: "$1 Billion +",
            }
        ),
    )

    attachments = competition.BasicAttachments(
        comp.sorted_proposal_keys, attachments_dir
    )
    comp.add_supplemental_information(attachments)

    comp.remove_information(competition.ColumnRemover("Org Country ID"))
    comp.remove_information(competition.ColumnRemover("Org State / Province ID"))
    comp.remove_information(
        competition.ColumnRemover("Org Locality / County / District ID")
    )
    comp.remove_information(competition.ColumnRemover("Priority Populations IDs"))
    comp.remove_information(competition.ColumnRemover("Primary Subject Area ID"))
    comp.remove_information(competition.ColumnRemover("GUID + Competition Domain"))
    comp.remove_information(competition.ColumnRemover("Primary Area of Expertise ID"))
    comp.transform_sheet(
        competition.LocationCombiner(
            column_name="Organization",
            address_1="Street Address",
            address_2="Address Line 2",
            city="City",
            locality="Org Locality / County / District",
            state="Org State / Province",
            country="Org Country",
            zip_postal="Zip / Postal Code",
        )
    )

    if config.geocode_api_key:
        geocoder = Geocoder.Geocoder(config.geocode_api_key)
        comp.process_cells_special("Organization Location", competition.GeocodeProcessor(geocoder))

    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Participant",
            first_name="Participant First Name",
            last_name="Participant Last Name",
            email="Participant email",
        )
    )
    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Primary Contact",
            first_name="Primary Contact First Name",
            last_name="Primary Contact Last Name",
            title="Primary Contact Title",
            phone="Primary Contact Phone",
            email="Primary Contact Email",
        )
    )
    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Secondary Contact",
            first_name="Secondary Contact First Name",
            last_name="Secondary Contact Last Name",
            title="Secondary Contact Title",
            phone="Secondary Contact Phone",
            email="Secondary Contact Email",
        )
    )
    for num in ["1", "2", "3"]:
        comp.transform_sheet(
            competition.PersonCombiner(
                column_name="Key Staff #%s" % num,
                first_name="Key Staff #%s First Name" % num,
                last_name="Key Staff #%s Last Name" % num,
            )
        )
        comp.transform_sheet(
            competition.ColumnRenamer(
                "Key Staff #%s Organization" % num, "Key Staff #%s Affiliation" % num
            )
        )

    for num in ["1", "2", "3", "4", "5"]:
        comp.transform_sheet(
            competition.LocationCombiner(
                column_name="Current Work #%s" % num,
                locality="Location of Current Work #%s Locality / District / County"
                % num,
                state="Location of Current Work #%s State /Province" % num,
                country="Location of Current Work #%s Country" % num,
            )
        )
        comp.remove_information(
            competition.ColumnRemover("Location of Current Work #%s Country ID" % num)
        )
        comp.remove_information(
            competition.ColumnRemover(
                "Location of Current Work #%s State / Province ID" % num
            )
        )
        comp.remove_information(
            competition.ColumnRemover(
                "Location of Current Work #%s Locality / District / County ID" % num
            )
        )

    # This exists because one of them was not like the others, and it makes the loop below prettier
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Location of Future Work #1 State / Province",
            "Location of Future Work #1 State /Province",
        )
    )
    for num in ["1", "2", "3", "4", "5"]:
        comp.transform_sheet(
            competition.LocationCombiner(
                column_name="Future Work #%s" % num,
                locality="Location of Future Work #%s Locality / District / County"
                % num,
                state="Location of Future Work #%s State /Province" % num,
                country="Location of Future Work #%s Country" % num,
            )
        )
        comp.remove_information(
            competition.ColumnRemover("Location of Future Work #%s Country ID" % num)
        )
        comp.remove_information(
            competition.ColumnRemover(
                "Location of Future Work #%s State / Province ID" % num
            )
        )
        comp.remove_information(
            competition.ColumnRemover(
                "Location of Future Work #%s Locality / District / County ID" % num
            )
        )

    comp.transform_sheet(
        competition.ColumnRenamer("Org Website", "Organization Website")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Point of Intervention", "Project Focus")
    )

    comp.sort("Rank", True)

    list_toc = toc.ListToc("All_Proposals")
    list_toc.proposal_formatter = toc.WikiTableTocProposalFormatter(
        [
            {
                "name": "Organization Name",
                "heading": "Organization",
            },
            {
                "name": "Project Title",
                "heading": "Title",
                "link": True,
            },
            {
                "name": "Application #",
                "heading": "ID #",
                "right_aligned": True,
            },
            {
                "name": "Rank",
                "heading": "Rank",
                "right_aligned": True,
            },
        ]
    )
    comp.add_toc(list_toc)

    comp.add_toc(toc.GenericListToc("Population_TOC", "Priority Populations"))
    comp.add_toc(toc.GenericListToc("Keyword_TOC", "Key Words and Phrases"))

    comp.add_toc(toc.AnnualBudgetToc("Annual Operating Budget"))

    comp.add_toc(
        toc.GeographicToc(
            "Geographic_TOC",
            [
                "Current Work #1 Location",
                "Current Work #2 Location",
                "Current Work #3 Location",
                "Current Work #4 Location",
                "Current Work #5 Location",
                "Future Work #1 Location",
                "Future Work #2 Location",
                "Future Work #3 Location",
                "Future Work #4 Location",
                "Future Work #5 Location",
            ],
            [
                competition.LocationCombiner.REGION,
                competition.LocationCombiner.SUBREGION,
                competition.LocationCombiner.COUNTRY,
            ],
        )
    )

    comp.add_toc(ProposalMapToc())
    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.Columns(comp).generate(tdc_config_dir)
        tdc.ProcessedCollection(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )
    my_wiki.collection_only = collection_only
    my_wiki.upload_collection(comp)
    my_wiki.upload_attachments(attachments.attachments)

    with open(top16_data_file) as f:
        for key in f.read().splitlines():
            if key in comp.proposals:
                proposal = comp.proposals[key]
                my_wiki.create_page(
                    "LFC Analysis of %s" % proposal.cell("MediaWiki Title"),
                    "{{ #tdcrender:LLIIA2020/id/" + key + ".mwiki|LFCAnalysis }}",
                )

    for proposal in comp.proposals.values():
        my_wiki.create_page(
            "Evaluations of %s" % proposal.cell("MediaWiki Title"),
            "{{ #tdcrender:LLIIA2020/id/" + key + ".mwiki|Evaluations }}",
        )


if __name__ == "__main__":
    main()
