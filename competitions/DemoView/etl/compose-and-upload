#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017, 2019, 2020 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Compose all of the Demo View 2019 Proposal CSV files.

Usage:

  $ compose-and-upload \\
       --proposals-json=PROPOSALS_CSV \\
       --tdc-config-dir=TDC_CONFIG_DIR \\
       --example-mou=EXAMPLE_MOU \\
       --example-financials=EXAMPLE_FINANCIALS \\
       --pare=PARE \\
       --collection-only

Command-line options:
  --proposals-json FILE           FILE is a JSON file representing the bulk of the proposal information

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.

  --example-mou FILE              FILE is an example MOU statement to be uploaded and attached to
                                  the proposal

  --example-financials FILE       FILE is an example Financials document to be uploaded and attached to
                                  the proposal

  --pare ARG                      If ARG is a number, reduce the number of items to 1/ARG.  If
                                  ARG begins with +, then ARG is a comma separated list of
                                  keys to include.  If ARG begins with @, then ARG is a
                                  file with a list of keys to include.  For both + and @,
                                  the list of keys will be limited to only the ones provided.

  --collection-only               Only upload the created CSV file.  Don't upload attachments or
                                  create wiki pages.  For use to speed up process when wiki has been
                                  created already.
"""

from etl import competition, wiki, toc, tdc, utils
import config
import getopt
import sys
import os
import json


class LFCAnalysisAdder(competition.InformationAdder):
    """Adds the columns for the LFC Analysis, all empty because these
    cells are there to be edited upon later"""

    def column_names(self):
        return ["LFC Analysis"]

    def cell(self, proposal, column_name):
        return {
            "Recommendation": "",
            "Short Description": "",
            "Likelihood of Success Summary": "",
            "Magnitude of Impact Summary": "",
            "Potential for Scale Summary": "",
            "Strength of Evidence Summary": "",
            "Overview": "",
            "Strength of Approach": "",
            "Risks and Challenges": "",
            "Internet Scan": "",
            "Diversity, Equity and Inclusion": "",
            "Observations": "",
            "Financial Overview": "",
        }


class DemoAttachments(competition.InformationAdder):
    """Adds the demo MOU and Financials statements to each proposal"""

    def __init__(self, mou, financials):
        self.mou = mou
        self.financials = financials
        self.attachments = []

    def column_names(self):
        return ["Attachments"]

    def cell(self, proposal, column_name):
        mou_filename = proposal.key() + "_" + os.path.basename(self.mou)
        financials_filename = proposal.key() + "_" + os.path.basename(self.financials)

        self.attachments.append(
            competition.Attachment(
                proposal.key(), mou_filename, column_name, "Default", self.mou
            )
        )
        self.attachments.append(
            competition.Attachment(
                proposal.key(), financials_filename, column_name, "Default", self.financials
            )
        )

        return [
            {"name": "MOU", "file": mou_filename},
            {"name": "Financials", "file": financials_filename},
        ]


def main():
    """Compose the LFC input and emit it as html-ized csv."""
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "proposals-json=",
                "tdc-config-dir=",
                "example-mou=",
                "example-financials=",
                "pare=",
                "collection-only",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    proposals_json = None
    tdc_config_dir = None
    example_mou = None
    example_financials = None
    pare = None
    collection_only = False
    for o, a in opts:
        if o == "--proposals-json":
            proposals_json = a
        elif o == "--pare":
            pare = a
        elif o == "--collection-only":
            collection_only = True
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        elif o == "--example-mou":
            example_mou = a
        elif o == "--example-financials":
            example_financials = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if proposals_json is None:
        sys.stderr.write("ERROR: need --proposals-json.\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    comp = competition.JsonBasedCompetition(
        proposals_json, "DemoView", "Application #", pare
    )

    comp.add_supplemental_information(LFCAnalysisAdder())

    attachments = DemoAttachments(example_mou, example_financials)
    comp.add_supplemental_information(attachments)

    comp.transform_sheet(
        competition.LocationCombiner(
            column_name="Organization Location",
            address_1="Street Address",
            address_2="Address Line 2",
            city="City",
            state="State / Province",
            locality="Locality / County / District",
            country="Nation",
            zip_postal="Zip / Postal Code",
        )
    )

    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Participant",
            first_name="Participant First Name",
            last_name="Participant Last Name",
            email="Participant Email",
        )
    )
    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Primary Contact",
            first_name="Primary Contact First Name",
            last_name="Primary Contact Last Name",
            title="Primary Contact Title",
            phone="Primary Contact Phone",
            email="Primary Contact Email",
        )
    )
    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Secondary Contact",
            first_name="Secondary Contact First Name",
            last_name="Secondary Contact Last Name",
            title="Secondary Contact Title",
            phone="Secondary Contact Phone",
            email="Secondary Contact Email",
        )
    )

    for num in ["1", "2", "3"]:
        comp.transform_sheet(
            competition.PersonCombiner(
                column_name="Key Staff #%s" % num,
                first_name="Key Staff #%s First Name" % num,
                last_name="Key Staff #%s Last Name" % num,
            )
        )

    for num in ["1", "2", "3", "4", "5"]:
        for location_type in ["Current", "Future"]:
            comp.transform_sheet(
                competition.LocationCombiner(
                    column_name="%s Work #%s Location" % (location_type, num),
                    address_1="Location of %s Work #%s Street Address"
                    % (location_type, num),
                    address_2="Location of %s Work #%s Address Line 2"
                    % (location_type, num),
                    city="Location of %s Work #%s City" % (location_type, num),
                    zip_postal="Location of %s Work #%s Zip / Postal Code"
                    % (location_type, num),
                    state="Location of %s Work #%s State / Province"
                    % (location_type, num),
                    locality="Location of %s Work #%s Locality / County / District"
                    % (location_type, num),
                    country="Location of %s Work #%s Nation" % (location_type, num),
                )
            )
            comp.remove_information(
                competition.ColumnRemover(
                    "Location of %s Work #%s Nation ID" % (location_type, num)
                )
            )
            comp.remove_information(
                competition.ColumnRemover(
                    "Location of %s Work #%s Locality / County / District ID"
                    % (location_type, num)
                )
            )
            comp.remove_information(
                competition.ColumnRemover(
                    "Location of %s Work #%s State / Province ID" % (location_type, num)
                )
            )

    comp.remove_information(competition.ColumnRemover("GUID + Competition Domain"))
    comp.remove_information(competition.ColumnRemover("Nation ID"))
    comp.remove_information(competition.ColumnRemover("State / Province ID"))
    comp.remove_information(
        competition.ColumnRemover("Locality / County / District ID")
    )
    comp.remove_information(competition.ColumnRemover("Primary Subject Area ID"))
    comp.remove_information(competition.ColumnRemover("Org Primary Area ID"))
    comp.remove_information(competition.ColumnRemover("Priority Populations ID"))

    comp.transform_sheet(competition.ColumnRenamer("Org Website", "Organization Website"))
    comp.transform_sheet(
        competition.ColumnRenamer("Org Primary Area", "Primary Area of Expertise")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Org Collaboration", "Team Collaboration")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Key Words", "Key Words and Phrases")
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Timeline-Milestones-Measurement of Results", "Timeline and Milestones"
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Barrier Assessment & Risk Mitigation",
            "Barrier Assessment and Risk Mitigation",
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer("EIN", "Applicant Tax Identification Number")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Ability to Scale", "Ability To Scale")
    )

    comp.sort("Panel Overall Score Rank Normalized", True)
    list_toc = toc.ListToc("AllProposals")
    list_toc.proposal_formatter = toc.WikiTableTocProposalFormatter(
        [
            {
                "name": "Organization Name",
                "heading": "Organization",
            },
            {
                "name": "Project Title",
                "heading": "Title",
                "link": True,
            },
            {
                "name": "Application #",
                "heading": "ID #",
                "right_aligned": True,
            },
            {
                "name": "Panel Overall Score Rank Normalized",
                "heading": "Rank",
                "right_aligned": True,
            },
        ]
    )
    comp.add_toc(list_toc)
    comp.add_toc(toc.GenericListToc("Population", "Priority Populations"))
    comp.add_toc(toc.GenericToc("Topic", "Primary Subject Area"))

    comp.add_toc(
        toc.MultiLevelToc(
            "Geographic_TOC",
            [
                "Current Work #1 Location",
                "Current Work #2 Location",
                "Current Work #3 Location",
                "Current Work #4 Location",
                "Current Work #5 Location",
                "Future Work #1 Location",
                "Future Work #2 Location",
                "Future Work #3 Location",
                "Future Work #4 Location",
                "Future Work #5 Location",
            ],
            [
                competition.LocationCombiner.REGION,
                competition.LocationCombiner.SUBREGION,
                competition.LocationCombiner.COUNTRY,
                competition.LocationCombiner.STATE,
            ],
        )
    )

    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.ValidProposals(comp, "Admin Review Status", "Admin Review Status").generate(
            tdc_config_dir
        )
        tdc.Columns(comp).generate(tdc_config_dir)
        tdc.ProcessedCollection(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )
    my_wiki.collection_only = collection_only
    my_wiki.upload_collection(comp)
    my_wiki.upload_attachments(attachments.attachments)

    for proposal in comp.ordered_proposals()[0:16]:
        my_wiki.create_page(
            "LFC Analysis of %s" % proposal.cell("MediaWiki Title"),
            "{{ #tdcrender:DemoView/id/" + proposal.key() + ".mwiki|LFCAnalysis }}",
        )

    for proposal in comp.proposals.values():
        my_wiki.create_page(
            "Evaluations of %s" % proposal.cell("MediaWiki Title"),
            "{{ #tdcrender:DemoView/id/" + proposal.key() + ".mwiki|Evaluations }}",
        )


if __name__ == "__main__":
    main()
