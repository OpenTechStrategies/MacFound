#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017, 2019, 2020 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Compose all of the Lever for Change 2017 Proposal CSV files.

Usage:

  $ compose-and-upload \\
       --proposals-csv=PROPOSALS_CSV \\
       --attachments-dir=ATTACHMENTS_DIR \\
       --tdc-config-dir=TDC_CONFIG_DIR \\
       --correction-file=CORRECTION_FILE \\
       --pare=PARE \\
       --collection-only

Command-line options:
  --proposals-csv FILE            FILE is a CSV file representing the bulk
                                  of the proposal information

  --attachments-dir DIR           DIR is a directory for compose-csvs to look in for what attachments
                                  will be uploaded to the torque wiki.  It needs to have subdirectories
                                  by proposal number.

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.

  --pare ARG                      If ARG is a number, reduce the number of items to 1/ARG.  If
                                  ARG begins with +, then ARG is a comma separated list of
                                  keys to include.  If ARG begins with @, then ARG is a
                                  file with a list of keys to include.  For both + and @,
                                  the list of keys will be limited to only the ones provided.

  --correction-file FILE          FILE is a csv of corrections to the main data.  The header
                                  must match the header of the original proposals file, and any
                                  one of the columns must contain the review number.  Then
                                  the data from the correction file will override the
                                  source data for output.  There can be multiple correction
                                  files, and each one overwrites the previous.

                                  If the data cells have the empty string, no correction is applied.

  --collection-only               Only upload the created CSV file.  Don't upload attachments or
                                  create wiki pages.  For use to speed up process when wiki has been
                                  created already.
"""

from etl import competition, wiki, toc, tdc
import config
import getopt
import sys
import os


class RankAdder(competition.InformationAdder):
    """Adds the rank for chip selections and semifinalists"""

    def __init__(self, chipselections_file, semifinalists_file):
        with open(chipselections_file) as f:
            self.chipselections = f.read().splitlines()

        with open(semifinalists_file) as f:
            self.semifinalists = f.read().splitlines()

    def column_names(self):
        return ["Ranking"]

    def cell(self, proposal, column_name):
        if proposal.key() in self.chipselections:
            return "Chip"

        if proposal.key() in self.semifinalists:
            return "Semi"

        return ""


class ScoreTransformer(competition.InformationTransformer):
    """Turns the ranks and scores for the legacy 2017 into objects
    that are in line with the standardized columns"""

    def column_names(self):
        return [
            "Panel Overall Score",
            "Panel IMPACTFUL Score",
            "Panel EVIDENCE-BASED Score",
            "Panel FEASIBLE Score",
            "Panel IMPACTFUL Score",
            "Rank",
        ]

    def cell(self, proposal, column_name):
        if column_name == "Panel Overall Score":
            return {
                "Normalized": proposal.cell("Total_Score"),
                "Normalized Rank": proposal.cell("Ranking"),
            }
        if column_name == "Panel IMPACTFUL Score":
            return {"Normalized": proposal.cell("Trait1_Score")}
        if column_name == "Panel EVIDENCE-BASED Score":
            return {"Normalized": proposal.cell("Trait2_Score")}
        if column_name == "Panel FEASIBLE Score":
            return {"Normalized": proposal.cell("Trait3_Score")}
        if column_name == "Panel IMPACTFUL Score":
            return {"Normalized": proposal.cell("Trait4_Score")}
        if column_name == "Rank":
            return proposal.cell("Ranking")
        pass

    def columns_to_remove(self):
        return [
            "Ranking",
            "Total_Score",
            "Trait1_Score",
            "Trait2_Score",
            "Trait3_Score",
            "Trait4_Score",
        ]


def main():
    """Compose the LFC input and emit it as html-ized csv."""
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "proposals-csv=",
                "tdc-config-dir=",
                "attachments-dir=",
                "pare=",
                "collection-only",
                "correction-file=",
                "chipselections=",
                "semifinalists=",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    proposals_csv = None
    attachments_dir = None
    tdc_config_dir = None
    pare = None
    collection_only = False
    correction_files = []
    chipselections = False
    semifinalists = False
    pare = None
    collection_only = False
    for o, a in opts:
        if o == "--proposals-csv":
            proposals_csv = a
        elif o == "--pare":
            pare = a
        elif o == "--collection-only":
            collection_only = True
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        elif o == "--attachments-dir":
            attachments_dir = a
        elif o == "--correction-file":
            correction_files.append(a)
        elif o == "--chipselections":
            chipselections = a
        elif o == "--semifinalists":
            semifinalists = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if proposals_csv is None:
        sys.stderr.write("ERROR: need --proposals-csv option.\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    comp = competition.CsvBasedCompetition(
        proposals_csv, "LFC100Change2017", "Review_Number", pare
    )
    comp.transform_sheet(competition.ColumnRenamer("Review_Number", "Application #"))
    comp.rekey("Application #")
    comp.add_supplemental_information(
        competition.MediaWikiTitleAdder("Registered Organization Name")
    )
    comp.add_supplemental_information(
        competition.GlobalViewMediaWikiTitleAdder(
            "100Change2017", "Registered Organization Name"
        )
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Competition Name", "100Change2017")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Achievement Level", "")
    )

    comp.add_supplemental_information(RankAdder(chipselections, semifinalists))

    fix_cell_processor = competition.FixCellProcessor()
    comp.process_all_cells_special(fix_cell_processor)
    fix_cell_processor.report()

    for correction_file in correction_files:
        correction_processor = competition.CorrectionData(
            "Review_Number", correction_file
        )
        for column in correction_processor.columns_affected():
            comp.process_cells_special(column, correction_processor)

    attachments = competition.RegexSpecifiedAttachments(
        comp.sorted_proposal_keys, attachments_dir
    )
    attachments.specify_new_subcolumn("^\\d*_mou", "MOU Attachment")
    attachments.specify_new_subcolumn("^\\d*_team", "Team Attachment")
    attachments.specify_new_subcolumn("financial", "Financials Attachment")
    comp.add_supplemental_information(attachments)

    comp.transform_sheet(
        competition.LocationCombiner(
            column_name="Organization Location",
            city="City",
            state="State / Province / Region",
            country="Country",
            zip_postal="Postal / Zip Code",
        )
    )

    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Primary Contact",
            phone="Phone Number",
        )
    )

    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Participant",
            email="Participant_Email",
        )
    )

    comp.transform_sheet(
        competition.LocationCombiner(
            column_name="Future Work #1 Location",
            country="Country/State 1",
        )
    )
    comp.transform_sheet(
        competition.LocationCombiner(
            column_name="Future Work #2 Location",
            country="Country/State 2",
        )
    )
    comp.transform_sheet(
        competition.LocationCombiner(
            column_name="Future Work #3 Location",
            country="Country/State 3",
        )
    )
    comp.transform_sheet(
        competition.LocationCombiner(
            column_name="Future Work #4 Location",
            country="Other Work Location",
        )
    )

    comp.transform_sheet(
        competition.ColumnRenamer("Registered Organization Name", "Organization Name")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Legal Status", "Organization Legal Status")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Area of Org Expertise", "Primary Area of Expertise")
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Primary Thematic Area", "Primary Subject Area Category"
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Hear about 100 and Change Selection", "Source")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Team Purpose", "Case for Partnership")
    )
    comp.transform_sheet(competition.ColumnRenamer("Legal Entity Name", "Legal Name"))
    comp.transform_sheet(
        competition.ColumnRenamer("Team Structure", "Team Collaboration")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Problem Statement", "Challenge Statement")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Proposed Solution", "Solution Overview")
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Timeline and Key Milestones", "Timeline and Milestones"
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Risk Assessment", "Barrier Assessment and Risk Mitigation"
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Plan Monitoring/Evaluation/Learning", "Measurement of Results"
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Resource Requirements and Sustainability", "Total Resource Requirements"
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Human Subjects Research", "Human Subject Research")
    )
    comp.transform_sheet(competition.ColumnRenamer("Team Story", "Why Your Team"))
    comp.transform_sheet(competition.ColumnRenamer("Pitch Video Link", "Video"))
    comp.transform_sheet(ScoreTransformer())

    comp.add_allowlist_exception(
        "Principal Organization Registration Location", "Application"
    )
    comp.add_allowlist_exception("Principal Organization Jurisdiction", "Application")
    comp.add_allowlist_exception(
        "Principal Organization Jurisdiction - Other", "Application"
    )
    comp.add_allowlist_exception("Principal Organization City", "Application")
    comp.add_allowlist_exception(
        "Principal Organization State / Province", "Application"
    )
    comp.add_allowlist_exception("Principal Organization Postal Code", "Application")
    comp.add_allowlist_exception("Principal Organization Country", "Application")
    comp.add_allowlist_exception(
        "Principal Organization Point of Contact Name", "Application"
    )
    comp.add_allowlist_exception(
        "Principal Organization Point of Contact Title", "Application"
    )
    comp.add_allowlist_exception(
        "Principal Organization Point of Contact Phone", "Application"
    )
    comp.add_allowlist_exception(
        "Principal Organization Point of Contact Email", "Application"
    )
    comp.add_allowlist_exception("Registration Location", "Application")
    comp.add_allowlist_exception("Legal Status - Other", "Application")
    comp.add_allowlist_exception("Registration Location - Other", "Application")
    comp.add_allowlist_exception("Principal Organization Legal Status", "Application")
    comp.add_allowlist_exception(
        "Principal Organization Legal Status - Other", "Application"
    )
    comp.add_allowlist_exception(
        "Principal Organization Legal Status - Other - Notes", "Application"
    )
    comp.add_allowlist_exception("Hear about 100 and Change Notes", "Application")
    comp.add_allowlist_exception(
        "Principal Organization Primary Area of Expertise - Dropdown", "Application"
    )
    comp.add_allowlist_exception(
        "Principal Organization Primary Area of Expertise - Notes", "Application"
    )
    comp.add_allowlist_exception(
        "Principal Organization Primary Thematic Area of Proposed Solution - Dropdown",
        "Application",
    )
    comp.add_allowlist_exception(
        "Principal Organization Primary Thematic Area of Proposed Solution - Notes",
        "Application",
    )
    comp.add_allowlist_exception("Oceans/Space/Global", "Application")
    comp.add_allowlist_exception("Tactics and Technology", "Application")
    comp.add_allowlist_exception("Previous Performance", "Application")
    comp.add_allowlist_exception("Organizational Capacity", "Application")
    comp.add_allowlist_exception("Competition Name2", "Application")
    comp.add_allowlist_exception("Trait4_Comment1", "Panel")
    comp.add_allowlist_exception("Trait4_Comment2", "Panel")
    comp.add_allowlist_exception("Trait4_Comment3", "Panel")
    comp.add_allowlist_exception("Trait4_Comment4", "Panel")
    comp.add_allowlist_exception("Trait4_Comment5", "Panel")
    comp.add_allowlist_exception("Trait2_Comment1", "Panel")
    comp.add_allowlist_exception("Trait2_Comment2", "Panel")
    comp.add_allowlist_exception("Trait2_Comment3", "Panel")
    comp.add_allowlist_exception("Trait2_Comment4", "Panel")
    comp.add_allowlist_exception("Trait2_Comment5", "Panel")
    comp.add_allowlist_exception("Trait3_Comment1", "Panel")
    comp.add_allowlist_exception("Trait3_Comment2", "Panel")
    comp.add_allowlist_exception("Trait3_Comment3", "Panel")
    comp.add_allowlist_exception("Trait3_Comment4", "Panel")
    comp.add_allowlist_exception("Trait3_Comment5", "Panel")
    comp.add_allowlist_exception("Trait1_Comment1", "Panel")
    comp.add_allowlist_exception("Trait1_Comment2", "Panel")
    comp.add_allowlist_exception("Trait1_Comment3", "Panel")
    comp.add_allowlist_exception("Trait1_Comment4", "Panel")
    comp.add_allowlist_exception("Trait1_Comment5", "Panel")
    comp.add_allowlist_exception("Valid_Submission", "Panel")
    comp.add_allowlist_exception("Big_Bet_Enduring_Commitment_Alignment", "Panel")
    comp.add_allowlist_exception("Reason_For_Turndown", "Panel")
    comp.add_allowlist_exception("Comments", "Panel")
    comp.add_allowlist_exception("Why Collaboration is Effective", "Application")

    comp.sort("Organization Name")

    comp.add_toc(toc.GenericToc("Topic_TOC", "Primary Subject Area Category"))

    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.Columns(comp).generate(tdc_config_dir)
        tdc.ProcessedCollection(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )
    my_wiki.collection_only = collection_only
    my_wiki.upload_collection(comp)
    my_wiki.upload_attachments(attachments.attachments)


if __name__ == "__main__":
    main()
