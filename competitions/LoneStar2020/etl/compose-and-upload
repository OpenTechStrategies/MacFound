#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017, 2019, 2020 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Compose all of the Lever for Change LoneStar 2030 CSV files.

Usage:

  $ compose-and-upload \\
       --proposals-csv=PROPOSALS_CSV \\
       --attachments-dir=ATTACHMENTS_DIR \\
       --judge-evaluation-csv=JUDGE_EVALUATION_CSV \\
       --tdc-config-dir=TDC_CONFIG_DIR \\
       --correction-file=CORRECTION_FILE \\
       --pare=PARE \\
       --collection-only

Command-line options:
  --proposals-csv FILE            FILE is a CSV file representing the bulk
                                  of the proposal information

  --attachments-dir DIR           DIR is a directory for compose-csvs to look in for what attachments
                                  will be uploaded to the torque wiki.  It needs to have subdirectories
                                  by proposal number.

  --judge-evaluation-csv FILE     FILE is a CSV file with a many to one relationshp
                                  between judges and the proposals they evaluated,
                                  with the extra data being their evaluation

  --correction-file FILE          FILE is a csv of corrections to the main data.  The header
                                  must match the header of the original proposals file, and any
                                  one of the columns must contain the review number.  Then
                                  the data from the correction file will override the
                                  source data for output.  There can be multiple correction
                                  files, and each one overwrites the previous.

                                  If the data cells have the empty string, no correction is applied.

  --expert-panel-evaluation-csv FILE    FILE is a CSV file with a row for each proposal
                                  that includes the rank and scoring for the expert panel
                                  review, but none of the comments.

  --financial-sheets-dir DIR      DIR is the location for financial data csvs in a very specific
                                  format that's handled by FinancialDataAdder.  They get
                                  transformed into json and then displayed on ont he LFC Analysis pages.

  --lfc-analysis-pages FILE       FILE is a simle newline separated list of proposal keys
                                  for which LFC Analysis pages should be generated.

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.

  --pare ARG                      If ARG is a number, reduce the number of items to 1/ARG.  If
                                  ARG begins with +, then ARG is a comma separated list of
                                  keys to include.  If ARG begins with @, then ARG is a
                                  file with a list of keys to include.  For both + and @,
                                  the list of keys will be limited to only the ones provided.

  --collection-only               Only upload the created CSV file.  Don't upload attachments or
                                  create wiki pages.  For use to speed up process when wiki has been
                                  created already.
"""

from etl import competition, wiki, toc, tdc, utils
import config
import getopt
import sys
import os
import csv
import json
import re


class LFCAnalysisAdder(competition.InformationAdder):
    """Adds the columns for the LFC Analysis, all empty because these
    cells are there to be edited upon later"""

    def column_names(self):
        return ["LFC Analysis"]

    def cell(self, proposal, column_name):
        return {
            "Recommendation": "",
            "Short Description": "",
            "LHP Relationship History": "",
            "TRANSFORMATIVE Summary": "",
            "EVIDENCE-BASED Summary": "",
            "FEASIBLE Summary": "",
            "SCALABLE Summary": "",
            "Overview": "",
            "Strength of Approach": "",
            "Risks and Challenges": "",
            "Internet Scan": "",
            "Diversity, Equity and Inclusion": "",
            "Observations": "",
            "Financial Overview": "",
            "Funding Overview": "",
        }


class SolutionCategoryRankAdder(competition.InformationAdder):
    """Adds a column for the rank within the solution category."""

    def __init__(self, proposals):
        self.grouped_and_ranked = {}
        for proposal in proposals:
            solution_cat = proposal.cell("Primary Subject Area Category")
            if solution_cat not in self.grouped_and_ranked:
                self.grouped_and_ranked[solution_cat] = []
            self.grouped_and_ranked[solution_cat].append(proposal)

        for proposal_set in self.grouped_and_ranked.values():
            proposal_set.sort(key=lambda p: int(p.cell("Rank")))

    def column_names(self):
        return ["Solution Category Ranking"]

    def cell(self, proposal, column_name):
        if proposal.cell("Rank") == "9999":
            return "9999"
        return (
            self.grouped_and_ranked[
                proposal.cell("Primary Subject Area Category")
            ].index(proposal)
            + 1
        )


def main():
    """Compose the LFC input and emit it as html-ized csv."""
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "proposals-csv=",
                "judge-evaluation-csv=",
                "tdc-config-dir=",
                "attachments-dir=",
                "financial-sheets-dir=",
                "correction-file=",
                "pare=",
                "collection-only",
                "expert-panel-evaluation-csv=",
                "lfc-analysis-pages=",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    proposals_csv = None
    judge_evaluation_csv = None
    expert_panel_evaluation_csv = None
    lfc_analysis_pages = None
    attachments_dir = None
    financial_sheets_dir = None
    tdc_config_dir = None
    correction_file = None
    pare = None
    collection_only = False
    for o, a in opts:
        if o == "--proposals-csv":
            proposals_csv = a
        elif o == "--pare":
            pare = a
        elif o == "--collection-only":
            collection_only = True
        elif o == "--judge-evaluation-csv":
            judge_evaluation_csv = a
        elif o == "--expert-panel-evaluation-csv":
            expert_panel_evaluation_csv = a
        elif o == "--lfc-analysis-pages":
            lfc_analysis_pages = a
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        elif o == "--correction-file":
            correction_file = a
        elif o == "--attachments-dir":
            attachments_dir = a
        elif o == "--financial-sheets-dir":
            financial_sheets_dir = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if proposals_csv is None:
        sys.stderr.write("ERROR: need --proposals-csv option.\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    comp = competition.CsvBasedCompetition(
        proposals_csv, "LoneStar2020", "Application #", pare
    )

    correction_processor = competition.CorrectionData("Application #", correction_file)
    for column in correction_processor.columns_affected():
        comp.process_cells_special(column, correction_processor)

    comp.add_supplemental_information(competition.MediaWikiTitleAdder("Project Title"))
    comp.add_supplemental_information(
        competition.GlobalViewMediaWikiTitleAdder("LoneStar2020", "Project Title")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Competition Name", "LoneStar2020")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Achievement Level", "")
    )
    comp.add_supplemental_information(
        competition.StaticColumnAdder("Total Projected Costs", 10000000)
    )

    fix_cell_processor = competition.FixCellProcessor()
    comp.process_all_cells_special(fix_cell_processor)
    fix_cell_processor.report()

    # Some new lines snuck into some descriptions, and those should all be single lines
    comp.process_cells_special(
        "Project Description", competition.RemoveHTMLBRsProcessor()
    )
    comp.process_cells_special(
        "Organization Name", competition.RemoveHTMLBRsProcessor()
    )

    comp.filter_proposals(
        competition.ColumnNotEqualsProposalFilter("Admin Review Status", "Valid")
    )

    comp.process_cells_special("Priority Populations", competition.ToListProcessor())
    comp.process_cells_special("Budget data", competition.BudgetTableProcessor())
    comp.process_cells_special(
        "Annual Operating Budget",
        competition.AnnualBudgetProcessor(
            {
                competition.AnnualBudget.LESS_THAN_1_MIL: "Less than $1.0 Million",
                competition.AnnualBudget.BETWEEN_1_MIL_AND_5_MIL: "$1.0 to 5 Million",
                competition.AnnualBudget.BETWEEN_5_MIL_AND_10_MIL: "$5.1 to 10 Million",
                competition.AnnualBudget.BETWEEN_10_MIL_AND_25_MIL: "$10.1 to 25 Million",
                competition.AnnualBudget.BETWEEN_25_MIL_AND_50_MIL: "$25.1 to 50 Million",
                competition.AnnualBudget.BETWEEN_50_MIL_AND_100_MIL: "$50.1 to 100 Million",
                competition.AnnualBudget.BETWEEN_100_MIL_AND_500_MIL: "$100.1 to 500 Million",
                competition.AnnualBudget.BETWEEN_500_MIL_AND_1_BIL: "$500.1 Million to $1 Billion",
                competition.AnnualBudget.MORE_THAN_1_BIL: "$1 Billion +",
            }
        ),
    )
    comp.process_cells_special(
        "Primary Subject Area",
        competition.PrimarySubjectAreaProcessor()
    )


    attachments = competition.BasicAttachments(
        comp.sorted_proposal_keys, attachments_dir
    )
    comp.add_supplemental_information(attachments)

    comp.transform_sheet(
        competition.LocationCombiner(
            column_name="Organization Location",
            address_1="Street Address",
            address_2="Address Line 2",
            city="City",
            state="Org State/Province",
            locality="Org Locality/ District/ County",
            country="Org Country",
            zip_postal="Zip/Postal Code",
        )
    )
    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Participant",
            first_name="Participant First Name",
            last_name="Participant Last Name",
            email="Participant Email",
        )
    )
    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Primary Contact",
            first_name="Primary Contact First Name",
            last_name="Primary Contact Last Name",
            title="Primary Contact Title",
            phone="Primary Contact Phone",
            email="Primary Contact Email",
        )
    )
    comp.transform_sheet(
        competition.PersonCombiner(
            column_name="Secondary Contact",
            first_name="Secondary Contact First Name",
            last_name="Secondary Contact Last Name",
            title="Secondary Contact Title",
            phone="Secondary Contact Phone",
            email="Secondary Contact Email",
        )
    )
    for num in ["1", "2", "3"]:
        comp.transform_sheet(
            competition.PersonCombiner(
                column_name="Key Staff #%s" % num,
                first_name="Key Staff #%s First Name" % num,
                last_name="Key Staff #%s Last Name" % num,
            )
        )

    # This exists because one of them was not like the others, and it makes the loop below prettier
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Location of Future Work #1 State / Province",
            "Location of Future Work #1 State /Province",
        )
    )

    for work_type in ["Current", "Future"]:
        for num in ["1", "2", "3", "4", "5"]:
            comp.transform_sheet(
                competition.LocationCombiner(
                    column_name="%s Work #%s Location" % (work_type, num),
                    state="Location of %s Work #%s State /Province" % (work_type, num),
                    country="Location of %s Work #%s Country" % (work_type, num),
                    locality="Location of %s Work #%s Locality / District / County"
                    % (work_type, num),
                )
            )
            comp.remove_information(
                competition.ColumnRemover(
                    "Location of %s Work #%s Country ID" % (work_type, num)
                )
            )
            comp.remove_information(
                competition.ColumnRemover(
                    "Location of %s Work #%s State / Province ID" % (work_type, num)
                )
            )
            comp.remove_information(
                competition.ColumnRemover(
                    "Location of %s Work #%s Locality / District / County ID"
                    % (work_type, num)
                )
            )

    comp.transform_sheet(
        competition.ColumnRenamer("Solution category", "Primary Subject Area Category")
    )
    comp.transform_sheet(
        competition.ColumnRenamer(
            "Organization legal status", "Organization Legal Status"
        )
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Org Website", "Organization Website")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Stakeholder Engagement", "Community Engagement")
    )
    comp.transform_sheet(
        competition.ColumnRenamer("Ability to Scale", "Ability To Scale")
    )
    comp.transform_sheet(competition.ColumnRenamer("Budget data", "Budget Data"))
    comp.add_allowlist_exception("Solution Category Ranking", "Application")
    comp.remove_information(competition.ColumnRemover("GUID + Competition Domain"))
    comp.remove_information(competition.ColumnRemover("Org Country ID"))
    comp.remove_information(competition.ColumnRemover("Org State / Province ID"))
    comp.remove_information(
        competition.ColumnRemover("Org Locality / County / District ID")
    )
    comp.remove_information(competition.ColumnRemover("Priority Populations Id"))
    comp.remove_information(competition.ColumnRemover("Primary Subject Area ID"))
    comp.remove_information(competition.ColumnRemover("Primary Area of Expertise ID"))

    if judge_evaluation_csv is not None:
        comp.add_supplemental_information(
            competition.EvaluationAdder(
                "Peer",
                judge_evaluation_csv,
                app_col_name="Application #",
                score_rank_raw_col_name="OverallScoreRank",
                score_rank_normalized_col_name="OverallScoreRankNormalized",
                sum_of_scores_raw_col_name="SumOfScores",
                sum_of_scores_normalized_col_name="SumOfScoresNormalized",
                trait_col_name="Trait",
                score_raw_col_name="TraitScore",
                score_normalized_col_name="TraitScoreNormalized",
                comments_col_name="TraitJudgeComment",
                comments_score_raw_col_name="TraitScore",
                comments_score_normalized_col_name="TraitScoreNormalized",
                anonymous_judge_name_col_name="Anonymous Judge Name",
                primary_rank=False,
            )
        )
    if expert_panel_evaluation_csv is not None:
        comp.add_supplemental_information(
            competition.EvaluationAdder(
                "Panel",
                expert_panel_evaluation_csv,
                app_col_name="Application #",
                score_rank_raw_col_name="OverallScoreRank",
                score_rank_normalized_col_name="OverallScoreRankNormalized",
                sum_of_scores_raw_col_name="SumOfScores",
                sum_of_scores_normalized_col_name="SumOfScoresNormalized",
                trait_col_name="Trait",
                score_raw_col_name="TraitScore",
                score_normalized_col_name="TraitScoreNormalized",
                comments_col_name="TraitJudgeComment",
                comments_score_raw_col_name="TraitScore",
                comments_score_normalized_col_name="TraitScoreNormalized",
                anonymous_judge_name_col_name="AnonymousJudgeName",
                primary_rank=True,
            )
        )
    comp.add_supplemental_information(LFCAnalysisAdder())
    comp.add_supplemental_information(
        SolutionCategoryRankAdder(comp.proposals.values())
    )
    comp.add_supplemental_information(
        competition.FinancialDataAdder(
            financial_sheets_dir,
            [
                {"name": "revenues", "text": "Revenues"},
                {"name": "expenses", "text": "Expenses (after depreciation)"},
                {
                    "name": "surplus",
                    "text": "Unrestricted surplus (after depreciation)",
                },
                {
                    "name": "surplus as percent",
                    "text": "As percent of expenses",
                    "percent": True,
                },
                {"name": "net assets", "text": "Unrestricted net assets"},
                {
                    "name": "months1",
                    "text": "Months of liquid unrestricted net assets (LUNA)[1]",
                },
                {
                    "name": "months2",
                    "text": "Months of liquid unrestricted net assets (LUNA)[2]",
                },
                {
                    "name": "months3",
                    "text": "Months of liquid unrestricted net assets (LUNA)[3]",
                },
                {
                    "name": "magnitude2",
                    "text": "Magnitude of surplus / (deficits) [2] (change in unrestricted net assets / average expenses over time period)",
                    "percent": True,
                },
                {
                    "name": "magnitude2",
                    "text": "Magnitude of surplus / (deficits)[2] (change in unrestricted net assets / average expenses over time period)",
                    "percent": True,
                },
                {
                    "name": "magnitude3",
                    "text": "Magnitude of surplus / (deficits)[3] (change in unrestricted net assets / average expenses over time period)",
                    "percent": True,
                },
                {
                    "name": "magnitude3",
                    "text": "Magnitude of surplus / (deficits)[3]  (change in unrestricted net assets / average expenses over time period)",
                    "percent": True,
                },
                {
                    "name": "magnitude4",
                    "text": "Magnitude of surplus / (deficits)[4]  (change in unrestricted net assets / average expenses over time period)",
                    "percent": True,
                },
            ],
        )
    )

    comp.sort("Rank", True)

    list_toc = toc.ListToc("All_Proposals")
    list_toc.proposal_formatter = toc.WikiTableTocProposalFormatter(
        [
            {
                "name": "Organization Name",
                "heading": "Organization",
            },
            {
                "name": "Project Title",
                "heading": "Title",
                "link": True,
            },
            {
                "name": "Application #",
                "heading": "ID #",
                "right_aligned": True,
            },
            {
                "name": "Rank",
                "heading": "Rank",
                "right_aligned": True,
            },
        ]
    )
    comp.add_toc(list_toc)
    comp.add_toc(toc.GenericListToc("Populations", "Priority Populations"))
    comp.add_toc(toc.GenericToc("Solution_Categories", "Primary Subject Area Category"))
    comp.add_toc(toc.AnnualBudgetToc("Annual Operating Budget"))

    comp.add_toc(
        toc.GenericToc(
            "Number_of_Employees",
            "Number of Employees",
            [
                "Fewer than 10 Full-time Employees",
                "10 to 25 Full-time Employees",
                "26 to 50 Full-time Employees",
                "51 to 100 Full-time Employees",
                "101 to 300 Full-time Employees",
                "301 to 500 Full-time Employees",
                "501 to 1,000 Full-time Employees",
                "1,000+ Full-time Employees",
            ],
        )
    )

    comp.add_toc(
        toc.GeographicToc(
            "Current_Work_Locations",
            [
                "Current Work #1 Location",
                "Current Work #2 Location",
                "Current Work #3 Location",
                "Current Work #4 Location",
                "Current Work #5 Location",
            ],
            [
                competition.LocationCombiner.COUNTRY,
                competition.LocationCombiner.STATE,
            ],
        )
    )

    comp.add_toc(
        toc.GeographicToc(
            "Future_Work_Locations",
            [
                "Future Work #1 Location",
                "Future Work #2 Location",
                "Future Work #3 Location",
                "Future Work #4 Location",
                "Future Work #5 Location",
            ],
            [
                competition.LocationCombiner.COUNTRY,
                competition.LocationCombiner.STATE,
            ],
        )
    )

    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.ValidProposals(comp, "Admin Review Status", "Valid").generate(
            tdc_config_dir
        )
        tdc.Columns(comp).generate(tdc_config_dir)
        tdc.ProcessedCollection(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )
    my_wiki.collection_only = collection_only
    my_wiki.upload_collection(comp)
    my_wiki.upload_attachments(attachments.attachments)

    with open(lfc_analysis_pages) as f:
        for key in f.read().splitlines():
            if key in comp.proposals:
                proposal = comp.proposals[key]
                my_wiki.create_page(
                    "LFC Analysis of %s" % proposal.cell("MediaWiki Title"),
                    "{{ #tdcrender:LoneStar2020/id/" + key + ".mwiki|LFCAnalysis }}",
                )

    for proposal in comp.proposals.values():
        my_wiki.create_page(
            "Evaluations of %s" % proposal.cell("MediaWiki Title"),
            "{{ #tdcrender:LoneStar2020/id/" + proposal.key() + ".mwiki|Evaluations }}",
        )


if __name__ == "__main__":
    main()
