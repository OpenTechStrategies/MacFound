# This file is generated from the ansible setup script
#
# If it needs to be customized differently, you should do the customizations there.
#
# Database configuration for torquedata
POSTGRES_DB_NAME="{{ supervisor_torquedata_name }}"
POSTGRES_DB_USER="{{ db_username }}"
POSTGRES_DB_PASSWORD="{{ db_password }}"

# Secret key as needed by django.  See
# https://docs.djangoproject.com/en/3.1/ref/settings/#std:setting-SECRET_KEY
SECRET_KEY="{{ secret_key }}"
MEDIA_ROOT="{{ torquedata_install_directory }}uploads"

COLLECTIONS_ALIAS="competitions"
DOCUMENTS_ALIAS="proposals"
ENABLED_JINJA_EXTENSIONS = ['jinja2.ext.do']

from core import utils
class RankBandFilter(utils.Filter):
    def name(self):
        return "rank_band"

    def display_name(self):
        return "Rank Band"

    def document_value(self, document):
        rank_str = False

        try:
            rank_str = document["Rank"]
        except KeyError:
            return "UNPERMISSIONED"

        if not rank_str:
            return "Unranked"

        try:
            rank = int(rank_str)
            if rank < 6:
                return "1-5"
            elif rank < 11:
                return "6-10"
            elif rank < 21:
                return "11-20"
            elif rank < 51:
                return "21-50"
            elif rank < 101:
                return "51-100"
            elif rank < 9999:
                return "101+"
            else:
                return "Unranked"
        except ValueError:
            return "Unranked"
        except TypeError:
            return "Unranked"

    def sort(self, names):
        correct_order = [
            "1-5",
            "6-10",
            "11-20",
            "21-50",
            "51-100",
            "101+",
            "Unranked",
        ]
        names.sort(key=lambda name: correct_order.index(name) if name in correct_order else len(correct_order))
        return names

    def ignored_values(self):
        return ["UNPERMISSIONED"]


class CompetitionName(utils.Filter):
    def name(self):
        return "competition_name"

    def display_name(self):
        return "Competition"

    def document_value(self, document):
        return document.get("Competition Name", "Unknown")


class AchievementLevel(utils.Filter):
    def name(self):
        return "achievement_level"

    def display_name(self):
        return "BSN Achievement Level"

    def document_value(self, document):
        return document.get("Achievement Level", "UNPERMISSIONED")

    def sort(self, names):
        correct_order = [
            "Awardee",
            "Finalist",
            "100&Change Top 100",
            "Idea Lab",
            "Top Proposal",
            "Member",
            "Former BSN",
            "None",
        ]
        names.sort(key=lambda name: correct_order.index(name) if name in correct_order else len(correct_order))
        return names

    def ignored_values(self):
        return ["UNPERMISSIONED"]


class Top200(utils.Filter):
    def name(self):
        return "top_200"

    def display_name(self):
        return "100&Change Top 200"

    def document_value(self, document):
        return document.get("Top 200", "None")

    def ignored_values(self):
        return ["None"]


FILTERS = [
    CompetitionName(),
    AchievementLevel(),
    RankBandFilter(),
    Top200(),
]
