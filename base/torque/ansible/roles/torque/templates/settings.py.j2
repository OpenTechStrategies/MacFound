from pathlib import Path
import os

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.contenttypes",
    "django.contrib.postgres",
    "django_extensions",
    "torque",
    "torque.cache_rebuilder",
]

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

ROOT_URLCONF = "torque.urls"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "{{ supervisor_torque_name }}",
        "USER": "{{ db_username }}",
        "PASSWORD": "{{ db_password }}",
        "HOST": "localhost",
    }
}

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Secret key as needed by django.  See
# https://docs.djangoproject.com/en/3.1/ref/settings/#std:setting-SECRET_KEY
SECRET_KEY="{{ secret_key }}"
MEDIA_ROOT="{{ torque_install_directory }}uploads"

TORQUE_COLLECTIONS_ALIAS="competitions"
TORQUE_DOCUMENTS_ALIAS="proposals"
TORQUE_ENABLED_JINJA_EXTENSIONS = ['jinja2.ext.do']

from torque import utils
class RankBandFilter(utils.Filter):
    def name(self):
        return "rank_band"

    def display_name(self):
        return "Rank Band"

    def document_value(self, document):
        rank_str = False

        try:
            rank_str = document["Rank"]
        except KeyError:
            return "UNPERMISSIONED"

        if not rank_str:
            return "Unranked"

        try:
            rank = int(rank_str)
            if rank < 6:
                return "1-5"
            elif rank < 11:
                return "6-10"
            elif rank < 21:
                return "11-20"
            elif rank < 51:
                return "21-50"
            elif rank < 101:
                return "51-100"
            elif rank < 9999:
                return "101+"
            else:
                return "Unranked"
        except ValueError:
            return "Unranked"
        except TypeError:
            return "Unranked"

    def sort(self, names):
        correct_order = [
            "1-5",
            "6-10",
            "11-20",
            "21-50",
            "51-100",
            "101+",
            "Unranked",
        ]
        names.sort(key=lambda name: correct_order.index(name) if name in correct_order else len(correct_order))
        return names

    def ignored_values(self):
        return ["UNPERMISSIONED"]


class CompetitionName(utils.Filter):
    def name(self):
        return "competition_name"

    def display_name(self):
        return "Competition"

    def document_value(self, document):
        return document.get("Competition Name", "Unknown")


class AchievementLevel(utils.Filter):
    def name(self):
        return "achievement_level"

    def display_name(self):
        return "BSN Achievement Level"

    def document_value(self, document):
        return document.get("Achievement Level", "UNPERMISSIONED")

    def sort(self, names):
        correct_order = [
            "Awardee",
            "Finalist",
            "100&Change Top 100",
            "Idea Lab",
            "Top Proposal",
            "Member",
            "Former BSN",
            "None",
        ]
        names.sort(key=lambda name: correct_order.index(name) if name in correct_order else len(correct_order))
        return names

    def ignored_values(self):
        return ["UNPERMISSIONED"]


class Top200(utils.Filter):
    def name(self):
        return "top_200"

    def display_name(self):
        return "100&Change Top 200"

    def document_value(self, document):
        return document.get("Top 200", "None")

    def ignored_values(self):
        return ["None"]


TORQUE_FILTERS = [
    CompetitionName(),
    AchievementLevel(),
    RankBandFilter(),
    Top200(),
]

class LocationProcessor(utils.CsvFieldProcessor):
    def __init__(self, include_address):
        self.include_address = include_address

    def field_names(self, field_name):
        names = []
        if self.include_address:
            names.append("%s Address" % field_name)

        names.extend([
            "%s State/Province" % field_name,
            "%s Country" % field_name,
        ])

        return names

    def process_value(self, value):
        values = []
        if self.include_address:
            if value and value.__getitem__:
                 values.append(
                     "%s %s, %s %s" % (
                             value.get("Street Address", ""),
                             value.get("Addres Line 2", ""),
                             value.get("City", ""),
                             value.get("Zip/Postal Code", "")
                 ))
            else:
                values.append("")

        if value and value.__getitem__:
            values.extend([
                value.get("State/Province", ""),
                value.get("Country", ""),
            ])
        else:
            values.extend(["", ""])

        return values

TORQUE_CSV_PROCESSORS = {
    "Organization Location": LocationProcessor(include_address=True),
    "Current Work #1 Location": LocationProcessor(include_address=False),
    "Current Work #2 Location": LocationProcessor(include_address=False),
    "Current Work #3 Location": LocationProcessor(include_address=False),
    "Current Work #4 Location": LocationProcessor(include_address=False),
    "Current Work #5 Location": LocationProcessor(include_address=False),
    "Future Work #1 Location": LocationProcessor(include_address=False),
    "Future Work #2 Location": LocationProcessor(include_address=False),
    "Future Work #3 Location": LocationProcessor(include_address=False),
    "Future Work #4 Location": LocationProcessor(include_address=False),
    "Future Work #5 Location": LocationProcessor(include_address=False),
}
