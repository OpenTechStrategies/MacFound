<?php

# When including this file, a competition needs to override $wgPluggableAuth_EnableLocalLogin
# before this file is loaded.  That's because this file takes care of the local login code
# that needs to happen after everything is set up.
#
# A possible refactor is to put the local login code in an event that fires after LocalSettings
# is set up, but there will have to be testing into when PluggableAuth ends up using that variable
# to make sure the override honored.

# Enable PluggableAuth
wfLoadExtension( 'PluggableAuth' );
$wgPluggableAuth_EnableAutoLogin = true;

# If the EnableLocalLogin flag is set out in the competition LocalSettings file, we will
# do nothing, and just trust that you know what you're doing.
if(!isset($wgPluggableAuth_EnableLocalLogin)) {
  # This must be set to true in order to allow mediawiki to do things like create
  # users from the commandline, or access things in the ETL pipeline and log in from
  # outside sources
  $wgPluggableAuth_EnableLocalLogin = true;

  # But if the user is coming from web, as in, not from the API and the REQUEST URI exists,
  # then force the local login
  if(array_key_exists('REQUEST_URI', $_SERVER)) {
    $wgPluggableAuth_EnableLocalLogin = (substr($_SERVER['REQUEST_URI'], 0, strlen("/{{ competition_name }}/api.php")) == "/{{ competition_name }}/api.php");
  }

  # When there are accounts that need to use local logins, in extreme circumstances,
  # they will be given a link to the a page that sets this cookie.  Also useful for
  # developers who want to sign in as a local test acocunt for UI evaluation
  #
  # This cookie is set by the locallogin.php file
  if(array_key_exists('locallogin', $_COOKIE)) {
    $wgPluggableAuth_EnableLocalLogin = $_COOKIE['locallogin'] == "on";
  }
}

$wgPluggableAuth_EnableLocalProperties = false;
$wgPluggableAuth_ButtonLabel = "Log In Using MacArthur SSO";
$wgInvalidUsernameCharacters = "";

# Enable SimpleSAMLphp
wfLoadExtension( 'SimpleSAMLphp' );
$wgSimpleSAMLphp_InstallDir = '{{ simplesaml_install_directory }}/simplesamlphp-1.18.4';
$wgSimpleSAMLphp_AuthSourceId = '{{ simplesaml_okta_metadata_name }}';
$wgSimpleSAMLphp_RealNameAttribute = ['firstName', 'lastName'];
$wgSimpleSAMLphp_EmailAttribute = 'email';
$wgSimpleSAMLphp_UsernameAttribute = 'email';

$wgSimpleSAMLphp_SyncAllGroups_GroupNameModificationCallback = function($origGroupName){
# Remove spaces
  return preg_replace('/\s/', '', $origGroupName);
};
$wgSimpleSAMLphp_AttributeProcessorFactories = [
  "MediaWiki\\Extension\\SimpleSAMLphp\\AttributeProcessor\\SyncAllGroups::factory"
];

# Rearrange Login Page
$wgHooks['AuthChangeFormFields'][] = function ($requests, $fieldInfo, &$formDescriptor, $action) {
  if($action != \MediaWiki\Auth\AuthManager::ACTION_LOGIN) {
    return;
  }

  global $wgPluggableAuth_EnableLocalLogin;
  if(!$wgPluggableAuth_EnableLocalLogin) {
    return;
  }

  $formDescriptor['username']['weight'] = 200;
  $formDescriptor['password']['weight'] = 201;
  $formDescriptor['rememberMe']['weight'] = 202;
  $formDescriptor['loginattempt']['weight'] = 203;
  $formDescriptor['break'] = [
    'type' => 'info',
    'weight' => 150,
    'cssclass' => 'mw-htmlform-login-or',
    'default' => "or"
  ];

  unset($formDescriptor['linkcontainer']);
  unset($formDescriptor['passwordReset']);
  unset($formDescriptor['createOrLogin']);

  if ( isset( $formDescriptor['pluggableauthlogin'] ) ) {
    $formDescriptor['pluggableauthlogin']['weight'] = -1;
  }
};
?>
