#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017, 2019, 2020 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Compose all of the Lever for Change LoneStar 2030 CSV files.

Usage:

  $ compose-and-upload \\
       --proposals-csv=PROPOSALS_CSV \\
       --attachments-dir=ATTACHMENTS_DIR \\
       --judge-evaluation-csv=JUDGE_EVALUATION_CSV \\
       --tdc-config-dir=TDC_CONFIG_DIR \\
       --pare=PARE \\
       --csv-only

Command-line options:
  --proposals-csv FILE            FILE is a CSV file representing the bulk
                                  of the proposal information

  --attachments-dir DIR           DIR is a directory for compose-csvs to look in for what attachments
                                  will be uploaded to the torque wiki.  It needs to have subdirectories
                                  by proposal number.

  --judge-evaluation-csv FILE     FILE is a CSV file with a many to one relationshp
                                  between judges and the proposals they evaluated,
                                  with the extra data being their evaluation

  --expert-panel-evaluation-csv FILE    FILE is a CSV file with a row for each proposal
                                  that includes the rank and scoring for the expert panel
                                  review, but none of the comments.

  --lfc-analysis-pages FILE       FILE is a simle newline separated list of proposal keys
                                  for which LFC Analysis pages should be generated.

  --tdc-config-dir DIR            DIR is the location for files that are the base configuration files
                                  needed by TorqueDataConnect, and can be optionally, manually, put on
                                  the torque wiki.  We don't automatically do that because we want to
                                  overwrite the configuration out there.

  --pare ARG                      If ARG is a number, reduce the number of items to 1/ARG.  If
                                  ARG begins with +, then ARG is a comma separated list of
                                  keys to include.  If ARG begins with @, then ARG is a
                                  file with a list of keys to include.  For both + and @,
                                  the list of keys will be limited to only the ones provided.

  --csv-only                      Only upload the created CSV file.  Don't upload attachments or
                                  create wiki pages.  For use to speed up process when wiki has been
                                  created already.
"""

from etl import competition, wiki, toc, tdc
import config
import getopt
import sys
import os
import csv


class LFCAnalysisAdder(competition.InformationAdder):
    """Adds the columns for the LFC Analysis, all empty because these
    cells are there to be edited upon later"""

    def column_names(self):
        return [
            "LFC Analysis: Recommendation",
            "LFC Analysis: Short Description",
            "LFC Analysis: LHP Relationship History",
            "LFC Analysis: TRANSFORMATIVE Summary",
            "LFC Analysis: EVIDENCE-BASED Summary",
            "LFC Analysis: FEASIBLE Summary",
            "LFC Analysis: SCALABLE Summary",
            "LFC Analysis: Overview",
            "LFC Analysis: Strength of Approach",
            "LFC Analysis: Risks and Challenges",
            "LFC Analysis: Internet Scan",
            "LFC Analysis: Diversity, Equity and Inclusion",
            "LFC Analysis: Observations",
            "LFC Analysis: Financial Overview",
            "LFC Analysis: Funding Overview",
        ]

    def cell(self, proposal, column_name):
        return ""


class SolutionCategoryRankAdder(competition.InformationAdder):
    """Adds a column for the rank within the solution category."""

    def __init__(self, proposals):
        self.grouped_and_ranked = {}
        for proposal in proposals:
            solution_cat = proposal.cell("Solution category")
            if solution_cat not in self.grouped_and_ranked:
                self.grouped_and_ranked[solution_cat] = []
            self.grouped_and_ranked[solution_cat].append(proposal)

        for proposal_set in self.grouped_and_ranked.values():
            proposal_set.sort(
                key=lambda p: int(p.cell("Panel Overall Score Rank Normalized"))
            )

    def column_names(self):
        return ["Solution Category Ranking"]

    def cell(self, proposal, column_name):
        if proposal.cell("Panel Overall Score Rank Normalized") is "9999":
            return "9999"
        return self.grouped_and_ranked[proposal.cell("Solution category")].index(
            proposal
        ) + 1


class ExpertPanelRankAdder(competition.InformationAdder):
    """Quick and dirty adder for placeholder for incoming expert
    panel evaluation sheet.  The sheet this is based off just has
    the scores and ranks in a spreadsheet, without the many to
    one relationship we usually get with comments."""
    def __init__(self, csv_location):
        csv_reader = csv.reader(
            open(csv_location, encoding="utf-8"), delimiter=",", quotechar='"'
        )

        header = next(csv_reader)
        self.data = {}

        for row in csv_reader:
            key = row[header.index("Application #")]
            rank = row[header.index("Overall Rank")]
            score = row[header.index("Score Total")]
            transform = row[header.index("TRANSFORMATIVE")]
            scalable = row[header.index("SCALABLE ")]
            feasible = row[header.index(" FEASIBLE ")]
            evidence_based = row[header.index("EVIDENCE-BASED")]

            self.data[key] = {
                "Panel Overall Score Rank Normalized": rank,
                "Panel Sum of Scores Normalized": score,
                "Panel EVIDENCE-BASED": "EVIDENCE-BASED",
                "Panel FEASIBLE": "FEASIBLE",
                "Panel SCALABLE": "SCALABLE",
                "Panel TRANSFORMATIVE": "TRANSFORMATIVE",
                "Panel EVIDENCE-BASED Score Normalized": evidence_based,
                "Panel FEASIBLE Score Normalized": feasible,
                "Panel SCALABLE Score Normalized": scalable,
                "Panel TRANSFORMATIVE Score Normalized": transform,
                "Panel EVIDENCE-BASED Comments": "",
                "Panel FEASIBLE Comments": "",
                "Panel SCALABLE Comments": "",
                "Panel TRANSFORMATIVE Comments": "",
                "Panel EVIDENCE-BASED Comment Scores Normalized": "",
                "Panel FEASIBLE Comment Scores Normalized": "",
                "Panel SCALABLE Comment Scores Normalized": "",
                "Panel TRANSFORMATIVE Comment Scores Normalized": "",
                    }


    def column_names(self):
        return [
            "Panel Overall Score Rank Normalized",
            "Panel Sum of Scores Normalized",
            "Panel EVIDENCE-BASED",
            "Panel FEASIBLE",
            "Panel SCALABLE",
            "Panel TRANSFORMATIVE",
            "Panel EVIDENCE-BASED Score Normalized",
            "Panel FEASIBLE Score Normalized",
            "Panel SCALABLE Score Normalized",
            "Panel TRANSFORMATIVE Score Normalized",
            "Panel EVIDENCE-BASED Comments",
            "Panel FEASIBLE Comments",
            "Panel SCALABLE Comments",
            "Panel TRANSFORMATIVE Comments",
            "Panel EVIDENCE-BASED Comment Scores Normalized",
            "Panel FEASIBLE Comment Scores Normalized",
            "Panel SCALABLE Comment Scores Normalized",
            "Panel TRANSFORMATIVE Comment Scores Normalized",
        ]

    def cell(self, proposal, column_name):
        if proposal.key() not in self.data:
            if column_name == "Panel Overall Score Rank Normalized":
                return "9999"
            return ""
        return self.data[proposal.key()][column_name]


def main():
    """Compose the LFC input and emit it as html-ized csv."""
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "",
            [
                "proposals-csv=",
                "judge-evaluation-csv=",
                "tdc-config-dir=",
                "attachments-dir=",
                "pare=",
                "csv-only",
                "expert-panel-evaluation-csv=",
                "lfc-analysis-pages=",
            ],
        )
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        sys.exit(2)

    proposals_csv = None
    judge_evaluation_csv = None
    expert_panel_evaluation_csv = None
    lfc_analysis_pages = None
    attachments_dir = None
    tdc_config_dir = None
    pare = None
    csv_only = False
    for o, a in opts:
        if o == "--proposals-csv":
            proposals_csv = a
        elif o == "--pare":
            pare = int(a)
        elif o == "--csv-only":
            csv_only = True
        elif o == "--judge-evaluation-csv":
            judge_evaluation_csv = a
        elif o == "--expert-panel-evaluation-csv":
            expert_panel_evaluation_csv = a
        elif o == "--lfc-analysis-pages":
            lfc_analysis_pages = a
        elif o == "--tdc-config-dir":
            tdc_config_dir = a
        elif o == "--attachments-dir":
            attachments_dir = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    if proposals_csv is None:
        sys.stderr.write("ERROR: need --proposals-csv option.\n\n")
        sys.stderr.write(__doc__)
        sys.exit(1)

    comp = competition.Competition(proposals_csv, "LoneStar2020", "Application #", pare)
    comp.add_supplemental_information(competition.MediaWikiTitleAdder("Project Title"))

    fix_cell_processor = competition.FixCellProcessor()
    comp.process_all_cells_special(fix_cell_processor)
    fix_cell_processor.report()

    comp.filter_proposals(
        competition.ColumnNotEqualsProposalFilter("Admin Review Status", "Valid")
    )

    comp.process_cells_special("Priority Populations", competition.MultiLineProcessor())
    comp.process_cells_special(
        "Total Resource Requirements", competition.NumberCommaizer()
    )
    comp.process_cells_special("Budget data", competition.BudgetTableProcessor())

    attachments = competition.BasicAttachments(
        comp.sorted_proposal_keys, attachments_dir
    )
    comp.add_supplemental_information(attachments)
    if judge_evaluation_csv is not None:
        comp.add_supplemental_information(
            competition.EvaluationAdder(
                "Judge",
                judge_evaluation_csv,
                app_col_name="Application #",
                score_rank_normalized_col_name="OverallScoreRankNormalized",
                sum_of_scores_normalized_col_name="SumOfScoresNormalized",
                trait_col_name="Trait",
                score_normalized_col_name="TraitScoreNormalized",
                comments_col_name="TraitJudgeComment",
                comments_score_normalized_col_name="TraitScoreNormalized",
            )
        )
    comp.add_supplemental_information(ExpertPanelRankAdder(expert_panel_evaluation_csv))
    comp.add_supplemental_information(LFCAnalysisAdder())
    comp.add_supplemental_information(SolutionCategoryRankAdder(comp.proposals.values()))

    comp.sort("Panel Overall Score Rank Normalized", True)

    comp.add_toc(toc.ListToc("All_Proposals"))
    comp.add_toc(toc.GenericMultiLineToc("Populations", "Priority Populations"))
    comp.add_toc(toc.GenericToc("Solution_Categories", "Solution category"))

    comp.add_toc(
        toc.GenericToc(
            "Annual_Budgets",
            "Annual Operating Budget",
            [
                "Less than $1.0 Million",
                "$1.0 to 5 Million",
                "$5.1 to 10 Million",
                "$10.1 to 25 Million",
                "$25.1 to 50 Million",
                "$50.1 to 100 Million",
                "$100.1 to 500 Million",
                "$500.1 Million to $1 Billion",
                "$1 Billion +",
            ],
        )
    )

    comp.add_toc(
        toc.GenericToc(
            "Number_of_Employees",
            "Number of Employees",
            [
                "Fewer than 10 Full-time Employees",
                "10 to 25 Full-time Employees",
                "26 to 50 Full-time Employees",
                "51 to 100 Full-time Employees",
                "101 to 300 Full-time Employees",
                "301 to 500 Full-time Employees",
                "501 to 1,000 Full-time Employees",
                "1,000+ Full-time Employees",
            ],
        )
    )

    comp.add_toc(
        toc.GeographicToc(
            "Current_Work_Locations",
            [
                [
                    "Location of Current Work #1 State /Province",
                    "Location of Current Work #1 Locality / District / County",
                ],
                [
                    "Location of Current Work #2 State /Province",
                    "Location of Current Work #2 Locality / District / County",
                ],
                [
                    "Location of Current Work #3 State /Province",
                    "Location of Current Work #3 Locality / District / County",
                ],
                [
                    "Location of Current Work #4 State /Province",
                    "Location of Current Work #4 Locality / District / County",
                ],
                [
                    "Location of Current Work #5 State /Province",
                    "Location of Current Work #5 Locality / District / County",
                ],
            ],
        )
    )

    comp.add_toc(
        toc.GeographicToc(
            "Future_Work_Locations",
            [
                [
                    "Location of Future Work #1 State / Province",
                    "Location of Future Work #1 Locality / District / County",
                ],
                [
                    "Location of Future Work #2 State /Province",
                    "Location of Future Work #2 Locality / District / County",
                ],
                [
                    "Location of Future Work #3 State /Province",
                    "Location of Future Work #3 Locality / District / County",
                ],
                [
                    "Location of Future Work #4 State /Province",
                    "Location of Future Work #4 Locality / District / County",
                ],
                [
                    "Location of Future Work #5 State /Province",
                    "Location of Future Work #5 Locality / District / County",
                ],
            ],
        )
    )

    comp.process_tocs()

    if tdc_config_dir is not None:
        tdc.AllProposals(comp).generate(tdc_config_dir)
        tdc.ValidProposals(comp, "Admin Review Status", "Valid").generate(
            tdc_config_dir
        )
        tdc.AllColumns(comp).generate(tdc_config_dir)
        tdc.ProcessedSpreadsheet(comp).generate(tdc_config_dir)

    my_wiki = wiki.WikiSession(
        config.username, config.password, comp.name, config.wiki_url
    )
    my_wiki.csv_only = csv_only
    my_wiki.upload_sheet(comp)
    my_wiki.upload_attachments(attachments.attachments)

    with open(lfc_analysis_pages) as f:
        for key in f.read().splitlines():
            if key in comp.proposals:
                proposal = comp.proposals[key]
                my_wiki.create_page(
                    "LFC Analysis of %s" % proposal.cell("MediaWiki Title"),
                    "{{ #tdcrender:LoneStar2020/id/" + key + ".mwiki|LFCAnalysis }}",
                )

    for proposal in comp.proposals.values():
        my_wiki.create_page(
            "Evaluations of %s" % proposal.cell("MediaWiki Title"),
            "{{ #tdcrender:LoneStar2020/id/" + proposal.key() + ".mwiki|Evaluations }}",
        )



if __name__ == "__main__":
    main()
