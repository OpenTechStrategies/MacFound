#!/bin/bash

# Load all the submission  proposals into a wiki.
#
# Copyright (C) 2017, 2019, 2020  Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

##########################################################################
#                                                                        #
#   NOTE: This code is highly specific to the particular filenames and   #
#   working environment used by Open Tech Strategies on a project for    #
#   the MacArthur Foundation.  For our own convenience, we have left     #
#   those assumptions in place.  That means this script won't work if    #
#   someone else tries to run it; we publish it just as an example.      #
#   It is open source software, so please modify it to suit your needs.  #
#                                                                        #
##########################################################################

COMPETITION="LLIIA2020"
MACFOUND_DIR=`dirname "${0}"`
BASE_DATA_DIR="${1}"

if [ "${BASE_DATA_DIR}" = "" ]; then
  echo "ERROR: BASE_DATA_DIRECTORY argument required."
  echo ""
  echo "Usage: '${0} BASE_DATA_DIRECTORY'"
  echo ""
  echo "BASE_DATA_DIRECTORY/LLIIA2020 is where all the work is done."
  echo ""
  exit 1
fi

DATA_DIR="${BASE_DATA_DIR}/${COMPETITION}"

# Make sure we have python3
python3 -V > /dev/null 2>&1 || { echo "python3 required, aborting" ; exit 1; }

PROPOSALS_CSV="LLIIAE_registration_and_application_data.csv"
ADMIN_REVIEW_CSV="AdminReviewP2P_LLIIA2020_07082020.csv"
JUDGE_EVALUATION_CSV="LLIIA_Peer_Review_Data_Pseudonymous_20200803.csv"
PANEL_EVALUATION_CSV="LLIIA_Evaluation_Panel_Data_anon.csv"
BUDGET_ZIP="LLIAE_AR_budget_data.zip"
BUDGET_CSV="LLIAE_registration_and_application_export_budget_data.csv"
REGIONCONFIG_CSV="regionconfig.csv"
BASE_ATTACHMENTS="LLIAE_registration_and_application_data.zip"
ATTACHMENTS_DIR="${DATA_DIR}/attachments/"
TMP_ATTACHMENTS_DIR="${DATA_DIR}/tmpattachments"
TOC_DIR="${DATA_DIR}/tocs"
TDC_CONFIG_DIR="${DATA_DIR}/tdcconfig"
CSV2WIKI_CONFIG="${MACFOUND_DIR}"/csv2wiki-config
OUTPUT_CSV="etl-processed.csv"
COMPOSER="${MACFOUND_DIR}"/compose-csvs
UPLOADER="${MACFOUND_DIR}"/upload-csv

if [ ! -f "${CSV2WIKI_CONFIG}" ]; then
  echo "ERROR: No csv2wiki-config file found."
  echo ""
  echo "Try doing 'cp csv2wiki-config.tmpl csv2wiki-config' and"
  echo "then editing csv2wiki-config as needed."
  echo ""
  exit 1
fi

if [ ! -d "${DATA_DIR}" ] ; then
  echo "Stage 0: Setting up data directory..."

  if [ "${OTSDIR}" = "" ] ; then
    echo "ERROR: \$OTSDIR is not set up"
    echo ""
    echo "See bureaucracy/onboarding about setting the OTSDIR environment variable up"
    exit 1
  fi

  ENCRYPTED_DIR="${OTSDIR}/clients/lever-for-change/torque-sites/${COMPETITION}/data/bigdata"
  if [ ! -d "${ENCRYPTED_DIR}" ] ; then
    echo "ERROR: it looks like your encrypted dir isn't checked out"
    echo ""
    echo "It was expected to be in:"
    echo "  $ENCRYPTED_DIR"
    echo ""
    echo "You will need to check out the subversion torque-sites data, and then"
    echo "run get-bigdata from ${OTSDIR}/clients/lever-for-change/torque-sites/${COMPETITION}/data/"
    exit 1
  fi

  mkdir -p $DATA_DIR
  echo "Decrypting..."

  gpg -o ${DATA_DIR}/${ADMIN_REVIEW_CSV} --decrypt ${ENCRYPTED_DIR}/${ADMIN_REVIEW_CSV}.gpg || exit 1
  gpg -o ${DATA_DIR}/${JUDGE_EVALUATION_CSV} --decrypt ${ENCRYPTED_DIR}/${JUDGE_EVALUATION_CSV}.gpg || exit 1
  gpg -o ${DATA_DIR}/${PANEL_EVALUATION_CSV} --decrypt ${ENCRYPTED_DIR}/${PANEL_EVALUATION_CSV}.gpg || exit 1
  gpg -o ${DATA_DIR}/${BASE_ATTACHMENTS} --decrypt ${ENCRYPTED_DIR}/${BASE_ATTACHMENTS}.gpg || exit 1
  gpg -o ${DATA_DIR}/${BUDGET_ZIP} --decrypt ${ENCRYPTED_DIR}/${BUDGET_ZIP}.gpg || exit 1

  unzip -d ${DATA_DIR} ${DATA_DIR}/${BUDGET_ZIP}

  mkdir -p ${TOC_DIR}
  mkdir -p ${TDC_CONFIG_DIR}

  echo "Setting up attachments..."
  unzip -d ${ATTACHMENTS_DIR} ${DATA_DIR}/${BASE_ATTACHMENTS}
  mv "${ATTACHMENTS_DIR}/LLIIAE_registration_and_application_data.csv" $DATA_DIR

  # Clean up large zips to save disk space
  rm ${DATA_DIR}/${BASE_ATTACHMENTS}
fi

if ! echo "831bd76551d1d21aea16820aa64463d27d3001a1  $DATA_DIR/$PROPOSALS_CSV" | sha1sum -c &> /dev/null ; then
  echo "ERROR: SHA of PROPOSALS_CSV did not match expectation!"
  echo "This means that we most likely got a new file, which may have the old"
  echo "errors in it (specifically the organization proposal 829)."
  echo "If we got a new file and there are no further errors, you"
  echo "can remove this check from torque-refresh!  If not, please"
  echo "make adjustments in a new file and update the sha."
  exit 1
fi

# We want to make sure there's no lingering old TOCs if we change how
# compose-csv creates them
mkdir -p $TOC_DIR
rm $TOC_DIR/*
cp tocs/generic.j2 $TOC_DIR/Population_TOC.j2
cp tocs/generic.j2 $TOC_DIR/Keyword_TOC.j2
cp tocs/list.j2 $TOC_DIR/AllProposals.j2
cp tocs/Geographic_TOC.j2 $TOC_DIR/

mkdir -p $TDC_CONFIG_DIR

### Compose the spreadsheets into one cohesive whole.
#
# Use --pare to convert only 1% of the entries, to save time while testing. 
echo "Stage 1: Composing..."
${COMPOSER} --proposals-csv="${DATA_DIR}/${PROPOSALS_CSV}" \
            --admin-review-csv="${DATA_DIR}/${ADMIN_REVIEW_CSV}" \
            --judge-evaluation-csv="${DATA_DIR}/${JUDGE_EVALUATION_CSV}" \
            --panel-evaluation-csv="${DATA_DIR}/${PANEL_EVALUATION_CSV}" \
            --budget-csv="${DATA_DIR}/${BUDGET_CSV}" \
            --regionconfig-csv="${MACFOUND_DIR}/${REGIONCONFIG_CSV}" \
            --attachments-dir=${ATTACHMENTS_DIR} \
            --tdc-config-dir="${TDC_CONFIG_DIR}" \
            --toc-dir="${TOC_DIR}" \
            > "${DATA_DIR}/${OUTPUT_CSV}"
if [ $? -ne 0 ]; then
		echo Composition failure!
		exit 1
fi
echo "Done with Stage 1 (Composing)."
echo ""

### Upload the spreadsheet and TOCs to a running instance of torquedata
#
# There's a dependency on a running version of mediawiki
# with a torquedata service running behind it, and a version of
# the TorqueDataConnect running on the mediawiki
#
# Because attachments take a bit of time to upload, and we have no current
# method to see if they have been uploaded, we just use a simple environment
# variable to test if someone wants to.
echo "Stage 2: Uploading csv and attachments..."
echo "  If you want to skip attachments, set SKIP_ATTACHMENTS in your environment"
if [ -z "${SKIP_ATTACHMENTS}" ] ; then
  ATTACHMENT_ARG="--attachments-dir=${ATTACHMENTS_DIR}"
else
  ATTACHMENT_ARG=""
fi
${UPLOADER} --csv="${DATA_DIR}/${OUTPUT_CSV}" \
            --toc-dir="${TOC_DIR}" \
            $ATTACHMENT_ARG \
            --config="${CSV2WIKI_CONFIG}"
if [ $? -ne 0 ]; then
		echo Upload failure!
		exit 1
fi
echo "Done with Stage 2 (Uploading csv)."
echo ""

# This pages are the template callers hosted on the wiki, as opposed to
# the data/jinja files that are processed by torquedata
TOC_PAGES=""
for file in $TOC_DIR/*.mwiki ; do
  TOC_PAGES="$TOC_PAGES --helper-page=$file"
done

# See note in README about how we're not really using csv2wiki as it's
# intended to be used...
echo "Stage 3: Creating wiki..."
python3 -m csv2wiki -c ${CSV2WIKI_CONFIG}      \
            --make-non-editable \
            --skip-rows=1 \
            ${TOC_PAGES} \
            --csv="${DATA_DIR}/${OUTPUT_CSV}"
echo "Done creating wiki."

echo "Stage 4: Creating config (optional)..."
echo ""
echo "We do not automatically upload the config because it's a living document."
echo "However, the following v1 files were placed in $TDC_CONFIG_DIR for you to"
echo "upload:"
echo " - AllProposals - All the proposals generated"
echo " - ValidProposals - The Valid proposals according to Admin Review"
echo " - AllColumns - All the available columns"
echo ""
echo "Done creating config."
