#!/usr/bin/env python3

# Try to identify organizations that have submitted multiple proposals.

# Copyright (c) 2020 Lever for Change, Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# If you did not receive a copy of the GNU Affero General Public License
# along with this program, see <http://www.gnu.org/licenses/>.

"""Usage: ./find-multi-competition-orgs --config CONFIG_FILE > output.csv

The format of the output is a CSV:

  ORGANIZATION_NAME,ORG_ID,100Change2017,100Change2020,EO2020,LLIIA2020,...
  "Foo, Inc.",551374967,"3314,51",,288,...
  ...etc...

The above data row represents an organization named "Foo, Inc." with
an identifying number (probably an EIN) of 551374967, which applied
twice to the 100Change2017 competition (with application review
numbers 3314 and 51) and once to EO2020 (with application review
number 288).

Note about local caching of data fetched from the API:
------------------------------------------------------

This program uses the LFC Torque API to fetch data the first time, then
caches that data locally in files named \"fmco-COMPETITION-cache.json\".
If you're ever debugging either this script or the LFC Torque API itself,
you will need to move a given competition's cache file out of the way
if you want to refetch that competition's data from the API.

Note about how unruly the production data set is:
-------------------------------------------------

The production dataset is messy, so the results of running this script
will be correspondingly messy.  Often the same organization uses
different names for different applications.  For example, these could
all represent the same applying organization:

  The University of Illinois
  The Board of Trustees of the University of Illinois
  University of Illinois at Chicago

Similarly:

  The Regents of the University of California Berkeley
  The University of California, Berkeley

If there is an EIN, we can use that number to create an equivalence
class that contains all the variant names, but not all applicants fill
in the EIN field, and some competitions don't even have an EIN field.

We don't have a reliable way of knowing when organization identifiers
actually represent the same underlying organization.  We just have a
collection of heuristics and we do the best we can.  Patches welcome.
What we really need is some sophisticated ML black box whereby every
time we read in a new application, we compare that application's
organization with every existing Organization instance we already have
and try to determine if the new org is the same as one of the orgs we
already have.

This is the sort of thing https://github.com/dedupeio/dedupe is for
(see https://docs.dedupe.io/en/latest/ for docs), so it's not as much
of a pipe dream as it might sound like.  But we're not doing anything
fancy like that yet.  Instead, we have string-matching-based-on-dicts
and stuff like that.  It's better than nothing, but that's just about
all it's better than.
"""

import os
import sys
import csv
import mwclient
import configparser
import getopt
import json


class Proposal:
    """
    One proposal in a competition.

    - TITLE (string) is this proposal's title.

    - ID_NUMBER (string) is the unique identifying number for this
      proposal within this competition (it is sometimes also called
      \"Review Number\" or \"Application Number\").  We leave it as
      a string because all we ever do with it is read and print it.

    - The ORG_* params are all strings (i.e., *not* Organization objects).  
      These parameters carry information about the applicant
      organization exactly as that information appeared in the proposal.
      Use None for missing information.
    """

    def __init__(self, title, app_number, 
                 org_name, org_web_site, org_id):
        self.title        = title
        self.app_number   = app_number
        self.org_name     = org_name
        self.org_web_site = org_web_site
        self.org_id       = org_id

    def process_app_number(app_num):
        """
        If APP_NUM is not a real proposal application number, return None.
        Otherwise, return APP_NUM.
        """
        # Most of these helper functions live in Organization, so
        # let's just use the same core meta-helper that they share.
        return Organization._process_internal(app_num)


class Competition:
    """A Competition contains multiple Proposals."""

    def __init__(self, name, proposals, 
                 proposal_title_key, app_number_key,
                 org_name_key, org_web_site_key, org_id_key):
        """
        - NAME (string) is the human-readable name for this competition.

        - PROPOSALS (list) is all the proposals for this competition,
          as returned from fetch_proposals()

        - PROPOSAL_TITLE_KEY (string) is the key (a.k.a. field name,
          header, column) for proposal titles in this competition.

        - APP_NUMBER_KEY (string) is the key for the
          application number (review number) of a given application.

        - ORG_NAME_KEY (string) is the key (a.k.a. field name, header,
          column) for organization name, or None if there is no key
          for organization name. 

        - ORG_WEB_SITE_KEY (string) is the key for org web site, or
          None if there is no key for org web site.

        - ORG_ID_KEY (string) is the key for org identifier
          (such as EIN), or None if there is no key for org ID.
        """
        self.name = name
        # The list of Proposal objects.
        self.proposals = [ ]
        # Each competition has a set of fields that is the same across
        # all proposals.  While our Proposal class doesn't hold all of
        # the information in all those fields (because we don't need
        # most of it), it is often useful for development purposes to
        # have the complete list of field names in a given competition
        # -- for example, because you're considering capturing a new
        # field and storing it in the Proposal class.
        self.fields = proposals[0].keys() if len(proposals) > 0 else None

        for raw_proposal in proposals:
            org_name = None
            org_web_site = None
            org_id = None
            if org_name_key is not None:
                org_name = raw_proposal[org_name_key]
            if org_web_site_key is not None:
                org_web_site = raw_proposal[org_web_site_key]
            if org_id_key is not None:
                org_id = raw_proposal[org_id_key]
            # Okay, this is a wonky special case.  In all the
            # competitions except one, the field name for proposal
            # title is "Project Title" and the value is exactly what
            # you'd expect it to be.  However, in one competition
            # (100Change2017), the field name for the proposal title
            # is "MediaWiki Title", and the value includes the
            # application's ID number in parentheses on the end of the
            # title.  In other words, instead of a title like this:
            # 
            #   "Saving The World One Egret At A Time"
            #
            # it would be this:
            # 
            #   "Saving The World One Egret At A Time (1588)"
            #
            # So if the proposal_title_key is "MediaWiki Title", we we
            # strip the parenthesized application number off the end
            # of the title, because it's completely redundant and
            # would only distract users of this script.
            proposal_title = raw_proposal[proposal_title_key]
            if proposal_title_key == "MediaWiki Title":
                proposal_title = proposal_title[:proposal_title.rfind(" ")]
            # Finally we can create the Proposal object.
            self.proposals.append(Proposal(proposal_title,
                                           raw_proposal[app_number_key],
                                           org_name, org_web_site, org_id))

    def print_proposals(self, dest=sys.stdout):
        """
        Print this competition's proposals to DEST in some friendly way.
        DEST defaults to stdout.
        """
        print("*** Competition \"%s\" proposals:" % self, file=dest)
        for proposal in self.proposals:
            print("  • %s" % proposal.title, file=dest)
            print("    - Application #:   %s" 
                  % proposal.app_number, file=dest)
            if proposal.org_name is not None:
                print("    - Org name:        %s" % proposal.org_name, 
                      file=dest)
            if proposal.org_web_site is not None:
                print("    - Org web site:    %s" % proposal.org_web_site, 
                      file=dest)
            if proposal.org_id is not None:
                print("    - Org ID:          %s" % proposal.org_id,
                      file=dest)

    def print_fields(self, dest=sys.stdout):
        """
        Print this competition's field names to DEST (defaults to stdout).
        """
        print("*** Competition \"%s\" fields:" % self, file=dest)
        for field in self.fields:
            print("  • %s" % field, file=dest)

    def __str__(self):
        return self.name


class Organization:
    def _process_internal(string):
        """
        If STRING is obviously not for real, return None.
        Otherwise, return STRING.
        This function should only be called by the other
        Organization.process_*() functions.
        """
        if string is None:
            return None
        if string.lower().find("not applicable") != -1:
            return None
        if string.lower() == "not":
            return None
        if string.lower().find("not aplucable") != -1:
            # This one's for real.  "On.x company and organization
            # (web site: Not) (ID: Not aplucable)
            # (competitions: [100Change2020: 533], [LLIIA2020: 3636])"
            return None
        elif string.lower() == "n/a":
            return None
        elif string.lower() == "null":
            return None
        else:
            return string
        
    def process_name(name):
        """
        If NAME is not a real name, return None.  Otherwise, return NAME.
        """
        return Organization._process_internal(name)

    def process_web_site(web_site):
        """
        Return WEB_SITE with any schema and/or "www." prefix stripped, and
        trailing slash stripped.  
        If WEB_SITE is None, return None.
        If WEB_SITE is something invalid, return None.
        If processing WEB_SITE results in the empty string, return None.
        """
        web_site = Organization._process_internal(web_site)
        if web_site is None:
            return None
        elif web_site.startswith("https://"):
            web_site = web_site[8:]
        elif web_site.startswith("http://"):
            web_site = web_site[7:]
        if web_site.startswith("www."):
            web_site = web_site[4:]
        web_site = web_site.rstrip('/')
        if len(web_site) == 0:
            return None
        else:
            return web_site

    def process_identifier(identifier):
        """
        Return IDENTIFIER with any hyphens removed.  This is because
        U.S. EINs are sometimes given with and sometimes without hyphen.
        If IDENTIFIER is None, just return None.
        If IDENTIFIER is something obviously invalid, return None.
        """
        identifier = Organization._process_internal(identifier)
        if identifier is None:
            return None
        elif identifier.lower().find("not applicable") != -1:
            return None
        elif identifier.lower() == "n/a":
            return None
        if identifier.lower().startswith("ein "):
            identifier = identifier[4:]
        elif identifier.lower().startswith("ein: "):
            identifier = identifier[5:]
        elif identifier.lower().startswith("ein:"):
            identifier = identifier[4:]
        return identifier.replace("-", "")

    def __init__(self, name, web_site, identifier, competition, app_number):
        """
        Any of these values can be None at the time the organization
        is created.  We may fill in some of them later.

        - NAME (string) is the human-readable name for this organization
        - WEB_SITE (string) is the org's web site.  It does not matter
          whether the parameter as passed has a "https://" or "http://";
          the schema prefix will be stripped when the value is stored.
        - IDENTIFIER (string) is a unique identifier for this org.
          For U.S.-based organizations, that typically means an EIN.
          Any hyphens will be removed.
        - COMPETITION (Competition instance) is a competition this
          organization is known to have applied to.
        - APP_NUMBER (string) is the application number
          (a.k.a. review number) of this application by this org
          to COMPETITION.  An organization may apply more than once
          to a given competition.
        """
        self.name = Organization.process_name(name)
        self.web_site = Organization.process_web_site(web_site)
        self.identifier = Organization.process_identifier(identifier)
        # Dict mapping Competition objects to lists of 
        # application numbers (strings).
        self.competitions = { }
        self.competitions[competition] = [app_number]

    def __str__(self):
        ret = self.name or "<<< No organization name given! >>>"
        if self.web_site is not None:
            ret += " (web site: %s)" % self.web_site
        else:
            ret += " (no web site)"
        if self.identifier is not None:
            ret += " (ID: %s)" % self.identifier
        else:
            ret += " (ID: N/A)"
        ret += " (competitions: %s)" \
            % ", ".join(["[%s: %s]" % (str(x), ", ".join(self.competitions[x])) for x in self.competitions.keys()])
        return ret


def get_competition_data_cache_name(competition):
    """
    Return the file name for caching the full data of COMPETITION.
    Both the argument and the return value are strings.
    """
    return "fmco" + "-" + competition + "-" "cache.json"


def fetch_proposals(site, competition, username, password, wiki, sheet):
    """
    Return all proposals for SHEET in COMPETITION in WIKI at SITE, 
    authenticating with USERNAME and PASSWORD.

    Note that it is normal for COMPETITION, WIKI, and SHEET to all be
    the same string, though they are not required to be.

    The returned collection of proposals is a dict.  As soon as I know
    more about its structure, I'll tell you, I promise.
    """
    proposals = None
    # Just load from local cache if available.  Otherwise, fetch the
    # data via API and then (of course) cache it.
    cache = get_competition_data_cache_name(competition)
    if os.path.exists(cache):
        with open(cache, "r") as f:
            tmp = json.load(f)
            # Slide past the first level of indirection.  There's a
            # top-level dict with one key (the sheet name), and the
            # value is a list.  All we want is the list, so let's just
            # grab that now.
            #
            # More details about this are available here:
            # 
            #   https://chat.opentechstrategies.com/#narrow/stream/45-Lever-for.20Change/topic/Torque/near/95332
            #
            # The basics of that conversation are as follows:
            # 
            # When we call
            #
            #   site.api("torque", format="json", path="/" + sheet)
            # 
            # it returns a dict with one key, the sheet name, and the
            # value is a list of all the proposals (each one
            # represented as as sub-dict).  Now, you might ask, why do
            # we even have that extra level of dict-with-one-key
            # pointing to a list of the actual proposal objects at
            # all?  Given that the original API call was done against
            # a specific competition and sheet, haven't we already
            # said what we're looking for?
            #
            # Three reasons:
            #
            #   1) The PHP code that deals with json is hairy if you
            #      don't have a top level named variable.
            # 
            #   2) It's more descriptive to have a name for what the
            #      array is, since JSON usually likes to have the top
            #      level object be an actual object. 
            #
            #   3) Doing it this way prepares for the (upcoming as of
            #      this writing) Global View feature in LFC Torque.
            #
            #  Reasons (1) and (2) are intertwined.  The PHP JSON
            #  library assumes that your top level JSON object is a
            #  JSON object and not an array.  In javascript, [] is an
            #  array, and {} is an object.  The "O" in "JSON" stands
            #  for "object" (and the "G" stands for "generality", ahem).
            proposals = tmp[sheet]
    else:
        site = mwclient.Site(site,
                             path = "/" + wiki + "/",
                             scheme = "https")
        site.login(username, password)
        tmp = site.api("torque", format="json", path="/" + sheet)
        with open(cache, "w") as f:
            json.dump(tmp, f)
        proposals = tmp[sheet]
    # One way or another, we now have in hand all the proposal data
    # for this competition.  Just return it.
    return proposals


def main():
    config = None
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], "C:h?",
                                     [ "config=",
                                       "help",
                                       "usage"
                                     ])
    except getopt.GetoptError as err:
        sys.stderr.write(str(err))
        sys.stderr.write("\n")
        sys.exit(1)

    for opt, optarg in opts:
        if opt in ("-h", "-?", "--help", "--usage",):
            print("%s" % __doc__)
            sys.exit(0)
        elif opt in ("-C", "--config",):
            config = configparser.ConfigParser()
            config.read_file(open(optarg))
        else:
            sys.stderr.write("ERROR: Unknown option '%s'\n" % opt)
            sys.exit(1)

    if config is None:
        sys.stderr.write("ERROR: --config option Unknown option '%s'\n" % opt)
        sys.exit(1)

    ### First inhale all proposals from all competitions. ###

    competitions = [ ]
    site = config.get("default", "site")
    for competition_name in config.sections():
        if competition_name.lower() == "default":
            continue

        # Not every key is present in every competition.  A missing
        # key will look like the empty string, so convert that to None.
        # (Confidential to Frank: What were we saying earlier about
        # accessing symbol names from source code?  I miss Lisp here.)
        proposal_title_key = config.get(competition_name, "proposal_title_key")
        if proposal_title_key == '': proposal_title_key = None
        app_number_key = config.get(competition_name, "app_number_key")
        if app_number_key == '': app_number_key = None
        org_name_key = config.get(competition_name, "org_name_key")
        if org_name_key == '': org_name_key = None
        org_web_site_key = config.get(competition_name, "org_web_site_key")
        if org_web_site_key == '': org_web_site_key = None
        org_id_key = config.get(competition_name, "org_id_key")
        if org_id_key == '': org_id_key = None

        # Get the proposals for this competition.  (Note that after
        # the first run, this should be a fast local cache fetch.)
        proposals = fetch_proposals(site, competition_name,
                                    config.get(competition_name, "username"),
                                    config.get(competition_name, "password"),
                                    config.get(competition_name, "wiki"),
                                    config.get(competition_name, "sheet"))

        # Now we can build this competition and save it.
        competition = Competition(competition_name, proposals,
                                  proposal_title_key, app_number_key,
                                  org_name_key, org_web_site_key, org_id_key)
        competitions.append(competition)
        # To see all the proposals in this competition listed in a
        # reasonably human-readable way, uncomment this:
        #
        # competition.print_proposals(dest=sys.stderr)
        #
        # To see all the fields available in this competition's
        # proposals, uncomment this:
        #
        # competition.print_fields(dest=sys.stderr)

    ### Figure out unique organizations across all competitions. ###

    # Dict mapping Organization instances to True.
    orgs = { }
    # Each dictionary maps its lower-cased string keys to lists.  
    # Each list contains Organization objects whose corresponding
    # field matches that key.  Actually, that's all a big lie.
    # Right now, the dict matches lower-cased strings to Organization
    # objects themselves, and this is not entirely correct, but we
    # have enough fuzzy matching problems to deal with at the moment
    # that I'm not going to add that one to my list.  Sheesh.
    orgs_by_name = { }
    orgs_by_web_site = { }
    orgs_by_id = { }
    for competition in competitions:
        for proposal in competition.proposals:
            org = None
            org_name = Organization.process_name(proposal.org_name)
            org_web_site = Organization.process_web_site(proposal.org_web_site)
            org_id = Organization.process_identifier(proposal.org_id)
            this_app_number = Proposal.process_app_number(proposal.app_number)
            # Check to see if we've seen this org before.  Note that
            # *different* orgs could be found in the different caches; 
            # that would be weird, but not inconceivable.  Handle it.
            org_found_by_name     = None
            org_found_by_id       = None
            org_found_by_web_site = None
            if (org_name is not None) and (org_name.lower() in orgs_by_name):
                org_found_by_name = orgs_by_name[org_name.lower()]
            if (org_id is not None) and (org_id.lower() in orgs_by_id):
                org_found_by_id = orgs_by_id[org_id.lower()]
            if (org_web_site is not None) and (org_web_site.lower() in orgs_by_web_site):
                org_found_by_web_site = orgs_by_web_site[org_web_site.lower()]
            # Remember how we said "Handle it." above?  This is where
            # we handle it.  And by "handle it", I mean punt to user.
            if org_found_by_name is not None:
                if org_found_by_id is not None:
                    if org_found_by_name != org_found_by_id:
                        sys.stderr.write("WARNING: Pathological case #1:\n")
                        sys.stderr.write("         A proposal has an org whose name has been seen before\n")
                        sys.stderr.write("         and whose org ID has been seen before, but the two\n")
                        sys.stderr.write("         organizations thus identified do not appear to be\n")
                        sys.stderr.write("         the same organization (or if they are we can't tell):\n")
                        sys.stderr.write("\n")
                        sys.stderr.write("           - %s\n" % org_found_by_name)
                        sys.stderr.write("           - %s\n" % org_found_by_id)
                        sys.stderr.write("\n")
                        sys.stderr.write("         DEBUG: org_name:     '%s'\n" % org_name)
                        sys.stderr.write("         DEBUG: org_web_site: '%s'\n" % org_web_site)
                        sys.stderr.write("         DEBUG: org_id:       '%s'\n" % org_id)
                        sys.stderr.write("         DEBUG: this_app_num: '%s'\n" % this_app_number)
                        sys.stderr.write("\n")
                if org_found_by_web_site is not None:
                    if org_found_by_name != org_found_by_web_site:
                        sys.stderr.write("WARNING: Pathological case #2:\n")
                        sys.stderr.write("         A proposal has an org whose name has been seen before\n")
                        sys.stderr.write("         and whose org web site has been seen before, but the two\n")
                        sys.stderr.write("         organizations thus identified do not appear to be\n")
                        sys.stderr.write("         the same organization (or if they are we can't tell):\n")
                        sys.stderr.write("\n")
                        sys.stderr.write("           - %s\n" % org_found_by_name)
                        sys.stderr.write("           - %s\n" % org_found_by_web_site)
                        sys.stderr.write("\n")
                        sys.stderr.write("         DEBUG: org_name:     '%s'\n" % org_name)
                        sys.stderr.write("         DEBUG: org_web_site: '%s'\n" % org_web_site)
                        sys.stderr.write("         DEBUG: org_id:       '%s'\n" % org_id)
                        sys.stderr.write("         DEBUG: this_app_num: '%s'\n" % this_app_number)
                        sys.stderr.write("\n")
            elif org_found_by_id is not None:
                if org_found_by_web_site is not None:
                    if org_found_by_id != org_found_by_web_site:
                        sys.stderr.write("WARNING: Pathological case #3:\n")
                        sys.stderr.write("         A proposal has an org whose org ID has been seen before\n")
                        sys.stderr.write("         and whose org web site has been seen before, but the two\n")
                        sys.stderr.write("         organizations thus identified do not appear to be\n")
                        sys.stderr.write("         the same organization (or if they are we can't tell):\n")
                        sys.stderr.write("\n")
                        sys.stderr.write("           - %s\n" % org_found_by_id)
                        sys.stderr.write("           - %s\n" % org_found_by_web_site)
                        sys.stderr.write("\n")
                        sys.stderr.write("         DEBUG: org_name:     '%s'\n" % org_name)
                        sys.stderr.write("         DEBUG: org_web_site: '%s'\n" % org_web_site)
                        sys.stderr.write("         DEBUG: org_id:       '%s'\n" % org_id)
                        sys.stderr.write("         DEBUG: this_app_num: '%s'\n" % this_app_number)
                        sys.stderr.write("\n")
            # This precedence order was picked somewhat at random.
            if org_found_by_id:
                org = org_found_by_id
            elif org_found_by_name:
                org = org_found_by_name
            elif org_found_by_web_site:
                org = org_found_by_web_site
            # Add this competition to an existing org or to a new org.
            if org is not None:
                if competition in org.competitions.keys():
                    # Same org might have applied twice.
                    found_app_numbers = org.competitions[competition]
                    if this_app_number in found_app_numbers:
                        sys.stderr.write("WARNING: duplicate application %s for\n"
                                         % this_app_number)
                        sys.stderr.write("         organization '%s'\n" % org.name)
                        sys.stderr.write("         in competition '%s'.\n" % competition)
                    else:
                        org.competitions[competition].append(this_app_number)
                else:
                    org.competitions[competition] = [this_app_number]
            else:
                org = Organization(org_name, org_web_site, org_id, 
                                   competition, this_app_number)
                if org.name is not None:
                    orgs_by_name[org.name.lower()] = org
                if org.web_site is not None:
                    orgs_by_web_site[org.web_site.lower()] = org
                if org.identifier is not None:
                    orgs_by_id[org.identifier.lower()] = org
            orgs[org] = True

    ### We've gathered all the answers.  Let's make some CSV output. ###

    csv_writer = csv.writer(sys.stdout)
    header_row = ["Organization Name", "Organization Identifier",]
    for competition in competitions:
        header_row.append(competition.name)
    csv_writer.writerow(header_row)
    for org in orgs.keys():
        list_it = False
        if len(org.competitions) > 1:
            # If this org has multiple competitions, list it.
            list_it = True
        else:
            # Or if it has multiple proposals in one competition, list it.
            for competition in org.competitions:
                if len(org.competitions[competition]) > 1:
                    list_it = True
                    break
        if list_it:
            output_row = [org.name, org.identifier]
            for competition in competitions:
                if competition in org.competitions:
                    output_row.append(",".join(org.competitions[competition]))
                else:
                    output_row.append(None)
            csv_writer.writerow(output_row)


if __name__ == '__main__':
  main()
